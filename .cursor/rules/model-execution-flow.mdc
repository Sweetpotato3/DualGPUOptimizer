---
description: Documents the execution flow and command generation for LLM inference across dual GPUs including memory management and allocation
globs: **/optimizer.py,**/model_profiles.py,**/launcher*.py,**/gpu_commands.py,**/memory/*.py
alwaysApply: false
---


# model-execution-flow

The model execution flow implements specialized handling for running large language models across dual GPU configurations:

## Command Generation and Model Launch

Key components:
- Framework-specific command generation for llama.cpp and vLLM with tensor parallel configurations
- GPU split ratio calculations based on available VRAM
- Memory allocation strategies with safety margins and reserved buffers
- Model preset handling for common architectures (Llama-2, Mistral, Mixtral)

File: dualgpuopt/optimizer.py

## Memory Management Pipeline

The memory management system implements:

- Rolling 60-second metric history for memory pressure monitoring
- Alert threshold classification:
  - Emergency: Memory usage ≥95% or Temperature ≥90°C
  - Critical: Memory usage ≥90% or Temperature ≥80°C 
  - Warning: Memory usage ≥75% or Temperature ≥70°C

Files:
- dualgpuopt/telemetry.py
- dualgpuopt/memory/profiler.py

## Layer Distribution Logic

Implements layer distribution across dual GPUs:
- Custom profiling logic for transformer layer execution timing
- Position-aware performance modeling for early/late layers
- Block consolidation to minimize cross-GPU transitions
- Quota-based allocation with configurable reserve ratio

File: dualgpuopt/layer_balance.py

## Execution Flow Control

The launch controller manages:
- Model parameter validation against GPU capabilities
- Dynamic context length adjustment based on available memory
- Framework-specific initialization and configuration 
- Process monitoring and graceful termination

Files:
- dualgpuopt/gui/launcher/launch_controller.py
- dualgpuopt/gui/launcher/parameter_resolver.py

## Memory Recovery System

Implements tiered recovery strategies:
1. Cache-only: Clears PyTorch cache
2. Clock reset: Manipulates GPU clock settings
3. Full reset: Comprehensive tensor cleanup
4. System-level: OS-specific resource recovery

File: dualgpuopt/memory/recovery.py

$END$