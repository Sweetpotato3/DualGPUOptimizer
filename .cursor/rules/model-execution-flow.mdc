---
description: Specification for model execution flows including command generation, resource allocation, and GPU optimization patterns.
globs: **/launcher/*,**/optimizer/*,**/gpu/*,**/commands/*,**/executor/*
alwaysApply: false
---


# model-execution-flow

## Launch Command Generation
- **Llama.cpp Commands**: Generates GPU split and layer allocation commands based on VRAM availability and model requirements. Handles context length optimization and GPU specific parameters.
- **vLLM Commands**: Configures tensor parallelism settings and GPU memory usage ratios. Generates deployment commands with optimized throughput settings.

## Resource Allocation System 
- Dynamic VRAM distribution across GPUs based on model size and architecture
- Implements context window scaling based on available GPU memory
- Automatic tensor parallel size determination from GPU count and VRAM capacity
- Layer placement optimization for multi-GPU setups

## Model Architecture Handling
The system adapts execution parameters based on model architectures:
- Mixture of Experts (MoE) models: Applies 1.05x memory overhead factor
- Attention patterns: Adjusts memory usage for MQA (0.25x) and GQA (0.5x)
- Per-model memory profiling for optimal GPU split ratios

## Memory Management
- Token-based memory estimation using architecture-specific formulas:
```
bytes_per_token = KV_OVERHEAD * layers * kv_heads * (hidden_size/heads) * dtype_size * expert_count
```
- Dynamic batch size adjustment based on available memory
- Memory recovery strategies including cache clearing and workload redistribution

## Launch Process Management 
- Environment initialization with GPU-specific variables
- Process monitoring with OOM detection and recovery
- Telemetry collection for token throughput and GPU utilization
- Graceful shutdown handling with resource cleanup

Key file paths:
- dualgpuopt/gui/launcher/launch_controller.py 
- dualgpuopt/gui/launcher/parameter_resolver.py
- dualgpuopt/commands/gpu_commands.py
- dualgpuopt/memory/predictor.py
- dualgpuopt/optimizer.py

$END$