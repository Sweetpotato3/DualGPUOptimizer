---
description: Documents how LLM models are executed across GPUs including command generation, config handling, and GPU resource allocation
globs: **/commands/*.py,**/engine/*.py,**/services/*.py,**/launcher/*.py,**/optimizer.py
alwaysApply: false
---


# model-execution-flow

## Command Generation & Launch Parameters

1. Framework-Specific Command Generation (dualgpuopt/optimizer.py):
- Generates optimized launch commands for llama.cpp and vLLM based on model/GPU configurations 
- Calculates tensor parallel sizes and GPU memory splits
- Handles context length recommendations based on available VRAM
- Sets environment variables for CUDA/NCCL optimization

2. Launch Controller Logic (dualgpuopt/gui/launcher/launch_controller.py):
- Manages model launch process through separate process management
- Coordinates GPU resource allocation between loaded models
- Implements graceful process termination with cleanup
- Handles OOM recovery through cache clearing

## Engine Management

1. Engine Pool System (dualgpuopt/engine/pool/core.py):
- Implements hot-swapping LRU cache for loaded model instances
- Health monitoring with auto-recovery for failed engines
- Metrics tracking for load times and performance
- Built-in fallback to mock engines on failures

2. Backend Selection (dualgpuopt/engine/backend.py):
- Routes model loading requests to appropriate backends:
  - GGUF files to LlamaCppBackend
  - AWQ models to VLLMBackend 
  - Standard models to HFBackend
- Validates model formats against backend capabilities
- Configures tensor parallel settings per backend

## Optimization System

1. Layer Balance Optimization (dualgpuopt/layer_balance.py):
- Custom algorithm for distributing model layers across GPUs
- Uses profiling data from 64 and 1024 sequence samples
- Weights allocation based on 20% short / 80% long sequences
- Maintains minimum 3-layer blocks per GPU

2. Memory Split Optimization (dualgpuopt/optimizer.py):
- Analyzes available GPU memory and model requirements
- Calculates optimal tensor parallel splits
- Generates environment settings for layer distribution
- Handles specialized MoE model memory requirements

Relevant File Paths:
- dualgpuopt/optimizer.py
- dualgpuopt/layer_balance.py 
- dualgpuopt/engine/pool/core.py
- dualgpuopt/engine/backend.py
- dualgpuopt/gui/launcher/launch_controller.py

$END$