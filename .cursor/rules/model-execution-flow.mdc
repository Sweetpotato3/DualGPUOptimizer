---
description: Specifies the model execution flow, command generation, and GPU resource allocation for LLM inference
globs: **/engine/**,**/model/**,**/serve/**,**/commands/**,**/optimizer/**
alwaysApply: false
---


# model-execution-flow

The model execution flow comprises several key components:

## Model Execution Logic
- Framework-specific command generation for llama.cpp and vLLM backends
- GPU memory split calculation based on model architecture and available VRAM
- Context length optimization using KV cache requirements and safety margins
- Dynamic batch size adjustment based on sequence lengths
- Custom tensor parallel configuration for multi-GPU deployments
- MoE (Mixture of Experts) model scaling with expert count adjustments

File paths:
- `dualgpuopt/optimizer.py`
- `dualgpuopt/ctx_size.py`

## Resource Allocation 
- Optimal GPU split ratio calculations for memory distribution
- Layer balancing algorithm for distributing model layers across GPUs
- Per-GPU memory quotas with configurable reserve ratios
- Profile-based memory requirements estimation
- Automatic fallback to mock mode when hardware unavailable
- Progressive recovery mechanisms for GPU monitoring failures

File paths:
- `dualgpuopt/layer_balance.py`
- `dualgpuopt/mpolicy.py`

## Command Generation
- Framework-specific parameter resolution:
  - llama.cpp: GPU split configuration and context size
  - vLLM: Tensor parallel size and memory limits
  - Custom environment variable generation for CUDA optimization
- Model preset configurations for common architectures (7B, 13B, 70B)
- Validation rules for memory requirements and context sizes

File paths:
- `dualgpuopt/commands/gpu_commands.py`

## Engine Pool Management
- LRU caching system for loaded models with configurable size limits
- Health monitoring with automatic model reloading
- Smart eviction policies based on memory pressure
- Fallback to mock engines for testing/development
- Thread-safe metrics collection for model performance

File paths:
- `dualgpuopt/engine/pool/core.py`

$END$