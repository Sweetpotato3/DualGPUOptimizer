---
description: Specification for analyzing data flow between GPU optimization and monitoring components
globs: dualgpuopt/**/*.py,integrated_app/**/*.py
alwaysApply: false
---


# data-flow-architecture

Core Data Flow Components:

1. GPU Telemetry Pipeline (dualgpuopt/telemetry.py, dualgpuopt/gui/dashboard.py)
Importance: 95
- Real-time GPU metrics collection and distribution
- Event-driven metric updates from NVML to GUI components
- GPU data flow includes: utilization, memory, temperature, power, clocks
- Custom middleware processes raw GPU data into normalized metrics

2. Memory Profiling Flow (dualgpuopt/memory/profiler.py)
Importance: 90
- Continuous memory event streaming between GPU hardware and analysis components
- Event classification system for memory patterns:
  * Inference boundaries
  * Memory allocations/deallocations 
  * Growth spikes
  * Leak detection
- Memory analytics pipeline with sliding window analysis

3. Model Parameter Distribution (dualgpuopt/optimizer.py)
Importance: 85
- Bi-directional flow of model configurations between UI and optimizer
- Parameter validation pipeline for context lengths and layer counts
- Dynamic configuration updates based on GPU capability detection
- Resource allocation broadcasting to execution components

4. GPU Command Pipeline (dualgpuopt/commands/gpu_commands.py)
Importance: 80
- Command generation workflow for framework-specific optimizations
- Parameter transformation for different ML frameworks:
  * llama.cpp: GPU split strings
  * vLLM: Tensor parallel configurations
- Resource allocation parameters flow from optimizer to launch system

5. Event Bus Architecture (dualgpuopt/services/event_bus.py)
Importance: 75
- Centralized event distribution for GPU metrics and status updates
- Priority-based event routing system
- Typed event flow with specialized GPU event hierarchy
- Error event propagation with recovery triggers

6. Configuration Flow (dualgpuopt/services/config_service.py)
Importance: 65
- Settings distribution across components
- GPU-specific configuration persistence
- Theme and appearance settings propagation
- Idle detection parameter distribution

The data flow architecture emphasizes real-time GPU metric distribution and optimization parameter propagation across the system, with specialized handling for memory profiling and model configuration management.

$END$