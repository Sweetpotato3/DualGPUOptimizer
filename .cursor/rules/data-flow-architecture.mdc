---
description: Documents data flow between components for GPU resource management and optimization systems
globs: **/dualgpuopt/**/*.py,**/services/**/*.py,**/metrics/**/*.py
alwaysApply: false
---


# data-flow-architecture

Primary Data Flow Components:

1. GPU Telemetry Pipeline (telemetry.py -> event_bus.py)
- GPU metrics collection: utilization, memory, temperature, power, clocks
- Metrics transformed into domain events through EventBusMiddleware
- Real-time distribution to optimization and monitoring components
- Importance: 95

2. Optimization Data Flow (optimizer.py -> layer_balance.py)
- Memory split ratios calculated from GPU capabilities
- Layer distribution mapping based on latency profiles
- Command generation for framework-specific deployments
- Importance: 90

3. Resource Monitoring Flow (gpu_info.py -> metrics.py)
- Continuous GPU state tracking with 60-second history
- Multi-level update intervals:
  * Critical metrics: 500ms
  * Standard metrics: 1000ms 
  * Background metrics: 2000ms
- Importance: 85

4. Configuration Pipeline (config_service.py -> mpolicy.py)
- GPU-specific settings persistence
- Mixed precision policy distribution
- Overclocking profile management
- Importance: 80

5. Command Generation Flow (commands/gpu_commands.py -> optimizer.py)
- Framework-specific command construction
- GPU split ratio application
- Tensor parallelism configuration
- Importance: 75

Key Integration Points:
- Telemetry -> Optimizer: GPU capability data
- Optimizer -> Commands: Framework configurations
- Metrics -> Dashboard: Visualization data
- Config -> GPU Services: Hardware settings

Core Data Models:
```
GPUMetrics {
  utilization: float
  memory_used: int
  temperature: int
  power_draw: float
  clock_speeds: {core: int, memory: int}
}

OptimizationConfig {
  memory_splits: float[]
  layer_distribution: int[]
  tensor_parallel: int
}
```

$END$