---
description: Documents the data flow patterns and component interactions for GPU resource management and optimization
globs: dualgpuopt/**/*.py,dual_gpu_optimizer/**/*.py,integrated_app/**/*.py
alwaysApply: false
---


# data-flow-architecture

Key Data Flow Components:

1. Telemetry Collection Pipeline
- GPUMetricsEvent system captures real-time GPU metrics
- Metrics flow from NVML through telemetry service to dashboard
- Event bus dispatches metrics to registered subscribers
- Flow: GPU Hardware → NVML → Telemetry Service → Event Bus → Dashboard

2. Model Optimization Pipeline  
- Model parameters flow from launcher to optimizer
- Optimizer calculates GPU splits and tensor parallel configurations
- Results flow to framework-specific command generators
- Flow: Model Config → Optimizer → Command Generator → Runner

3. Memory Management Pipeline
- Memory monitor tracks VRAM usage across GPUs
- Predictive OOM prevention with alert levels (Normal → Warning → Critical → Emergency) 
- Memory alerts trigger hierarchical recovery actions
- Flow: Memory Monitor → Alert System → Recovery Actions

4. Resource Distribution Pipeline
- Layer balance optimizer analyzes model architecture
- Generates per-GPU layer distribution plans
- Distributes tensors based on memory availability ratios
- Flow: Model Architecture → Layer Balancer → GPU Distribution

5. Configuration Flow
- GPU profiles and settings flow from config service
- State changes propagate through event bus to subscribers 
- Settings persist to disk for restoration
- Flow: Config Service → State Service → Event Bus → Components

Key File Paths:
```
dualgpuopt/
  telemetry.py          # Metric collection pipeline
  memory_monitor.py     # Memory tracking pipeline
  layer_balance.py      # Resource distribution
  optimizer.py          # Model optimization flow
  services/
    config_service.py   # Configuration pipeline
    state_service.py    # State management flow
```

The data flow architecture focuses on real-time GPU metric collection, model optimization, memory management, and resource distribution across multiple GPUs. The event bus provides decoupled communication between components.

$END$