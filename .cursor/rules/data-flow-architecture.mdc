---
description: Documentation of data flows between components, including GPU resource tracking, optimization parameters, and monitoring metrics.
globs: **/dualgpuopt/**/*.py,**/dual_gpu_optimizer/**/*.py
alwaysApply: false
---


# data-flow-architecture

Component Architecture:

1. GPU Metrics Flow
- GPUMonitor emits raw GPU metrics (temp, memory, utilization)
- Metrics flow through TelemetryService middleware pipeline for normalization
- MemoryProfiler tracks allocation/deallocation events
- Dashboard consumes metrics for visualization
- EventBus handles priority-based metric distribution

File: dualgpuopt/gpu/monitor.py

2. Memory Management Flow
- MemoryProfiler tracks GPU memory events:
  * AllocEvent: New memory allocations
  * FreeEvent: Memory deallocations
  * LeakEvent: Detected memory leaks
  * SpikesEvent: Sudden memory spikes
- Events flow to:
  * MemoryAnalyzer for leak detection
  * Recovery system for OOM handling
  * Dashboard for visualization

File: dualgpuopt/memory/profiler.py

3. Optimization Parameter Flow
- OptimizerTab generates model configs
- Parameters flow through validation layer
- ConfigService distributes to:
  * LauncherTab for model execution
  * ModelRunner for process management
  * Dashboard for monitoring

File: dualgpuopt/optimizer.py

4. Alert/Warning Flow
- MemoryMonitor detects threshold violations
- Alerts flow through priority queue
- SystemTray receives critical alerts
- Dashboard displays warning states
- Recovery system triggers mitigation

Files:
- dualgpuopt/memory/alerts.py
- dualgpuopt/services/event_bus.py

5. Model Execution Flow
- LauncherTab initiates model execution
- Parameters flow to ModelRunner
- Runner distributes work across GPUs
- Metrics flow back through TelemetryService
- Dashboard visualizes execution state

File: dualgpuopt/gui/launcher.py

The architecture emphasizes real-time GPU metric collection and distribution, with specialized flows for memory management, optimization parameters, and execution monitoring in a dual-GPU environment.

$END$