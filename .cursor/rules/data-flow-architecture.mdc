---
description: Documents data flows between components in dual GPU optimization system focusing on resource, parameter and metric propagation
globs: dualgpuopt/**/*.py,integrated_app/**/*.py,dual_gpu_optimizer/**/*.py
alwaysApply: false
---


# data-flow-architecture

Key Data Flow Components:

1. GPU Telemetry Pipeline
- Real-time metrics collection system propagates data through middleware layers:
  * Raw GPU metrics from NVML/mock sources
  * Processing through EventBusMiddleware for event distribution
  * LoggingMiddleware for debug data capture
- 60-second rolling history buffer maintains temporal metric data
- Metrics include: utilization, memory, temperature, power usage

2. Memory Profiling Data Flow
- Hierarchical memory event processing:
  * Allocation/deallocation tracking per GPU
  * Session-based inference cycle boundaries
  * Token processing metrics collection
- Memory timeline analysis with configurable history windows
- Anomaly detection system processes memory patterns:
  * Spike detection using dual thresholds
  * Leak detection through sustained growth analysis
  * Linear regression for growth rate calculation

3. Optimization Parameter Flow
- Model configuration parameters propagate through:
  * Layer distribution calculations
  * Tensor parallel size determinations
  * Split ratio optimization
- Framework-specific command generation:
  * llama.cpp GPU split parameters
  * vLLM tensor parallel configurations

4. Resource Monitoring Pipeline
- Multi-tier alert propagation system:
  * Hardware telemetry triggers (temp, memory, power)
  * Resource usage thresholds
  * System health indicators
- Real-time GPU state updates flow through:
  * Dashboard visualization system
  * System tray notifications
  * Alert management service

5. Event Bus Architecture
- Centralized event distribution for:
  * GPU metrics updates (HIGH priority)
  * Configuration changes (NORMAL priority)
  * Error conditions (CRITICAL priority)
- Thread-safe event propagation ensures data consistency

Primary Data Flow Paths:
```
Telemetry Collection -> Event Bus -> Visualization Components
Memory Profiling -> Analysis Engine -> Optimization Parameters
Resource Monitoring -> Alert System -> User Interface
```

Key Files:
- dualgpuopt/telemetry.py: Metric collection pipeline
- dualgpuopt/memory/profiler.py: Memory analysis flow
- dualgpuopt/services/event_bus.py: Event distribution system
- dualgpuopt/gui/dashboard.py: Visualization data handling

The data flow architecture emphasizes real-time metric propagation and analysis for dual GPU optimization, with specialized handling of memory patterns and resource utilization data.

$END$