---
description: Use for analyzing data flow patterns between GPU optimization components and services
globs: **/services/**,**/gpu_info.py,**/telemetry.py,**/event_bus.py
alwaysApply: false
---


# data-flow-architecture

The data flow architecture consists of several key flows:

## Core Data Flows

1. GPU Telemetry Flow
- GPU metrics flow from NVML through gpu_info.py to telemetry service
- Telemetry service broadcasts metrics via event bus to dashboard and optimizer
- Metrics include: utilization, memory, temperature, power, clocks
- Dashboard renders realtime visualizations of metrics

2. Configuration Flow
- Config service manages application settings and GPU parameters
- Changes propagate through event bus to relevant components  
- Overclocking settings flow from UI through command pattern to GPU
- Preset configs load from JSON and apply to optimizer

3. Optimization Flow  
- Layer balance data flows from profiler to optimizer
- Context size calculator determines memory splits
- Device maps flow to model runners
- Optimization parameters broadcast via events

4. Event Flow System
- Central event bus handles typed events with priorities
- GPU state changes trigger config/telemetry updates
- Error events flow to centralized error service
- UI components subscribe to relevant event types

## Key Integration Points

1. GPU Resource Data
- gpu_info.py → telemetry service → event bus → dashboard
- Memory/utilization stats drive optimization decisions

2. Optimization Parameters  
- optimizer.py → command generators → runners
- Device maps and memory splits coordinate GPU usage

3. Monitoring Metrics
- telemetry.py → event bus → dashboard/UI
- Error metrics flow through error service

4. Configuration State
- config_service.py → event bus → components
- Settings changes trigger component updates

The architecture emphasizes loose coupling through event-based communication while maintaining consistent data flow patterns for GPU resources, configuration, and monitoring data.

$END$