---
description: Specification for analyzing data flow and communication patterns between components in GPU optimization systems.
globs: dualgpuopt/**/*.py,dual_gpu_optimizer/**/*.py,integrated_app/**/*.py
alwaysApply: false
---


# data-flow-architecture

Key data flows for the DualGPUOptimizer system:

1. GPU Telemetry Pipeline
- GPU metrics collection through NVML service
- Event-based propagation to visualization components
- Rolling 60-second history buffer for time-series data
- Alert generation based on threshold violations
- File: `dualgpuopt/telemetry.py`

2. Memory Monitoring Flow
- Real-time memory tracking per GPU device
- Growth pattern analysis for leak detection 
- Snapshot data collection during inference sessions
- Token count correlation with memory usage
- Files: 
  - `dualgpuopt/memory/profiler.py`
  - `dualgpuopt/memory/monitor.py`

3. UI Data Integration
- Telemetry events routed through event bus
- GPU metrics displayed via dashboard components
- Performance data updates at configurable intervals
- Status propagation through status bar services
- Files:
  - `dualgpuopt/gui/main_app.py`
  - `dualgpuopt/gui/dashboard.py`

4. Resource Optimization Flow
- Model parameter analysis and GPU memory mapping
- Layer distribution calculations across GPUs
- Split ratio determination based on GPU capabilities
- Command generation for model deployment
- Files:
  - `dualgpuopt/optimizer.py`
  - `dualgpuopt/layer_balance.py`

5. Health Monitoring Pipeline
- Continuous GPU health status monitoring
- Error state tracking per device
- Recovery attempt management
- Alert generation and status updates
- File: `dualgpuopt/telemetry_history.py`

6. Legal Document Processing Flow
- Legal text vectorization and embedding generation
- Document chunking and metadata preservation
- RAG query processing and context retrieval
- Files:
  - `dualgpuopt/serve/legal_api.py`
  - `dualgpuopt/rag/retrieve.py`

7. Error Handling Pipeline
- Error categorization and severity assessment 
- Recovery strategy selection
- Alert propagation through event system
- Resource cleanup coordination
- Files:
  - `dualgpuopt/error_handler/base.py`
  - `dualgpuopt/error_handler/handler.py`

8. Settings Management Flow
- Configuration changes through settings service
- Event-based propagation to components
- Persistence to disk for settings state
- Theme and appearance update distribution
- Files:
  - `dualgpuopt/services/config_service.py`
  - `dualgpuopt/services/event_bus.py`

This architecture emphasizes real-time data flow for GPU monitoring, optimization, and error handling, with specialized paths for legal document processing and user configuration management.

$END$