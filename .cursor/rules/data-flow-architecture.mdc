---
description: For analyzing and documenting data flow architectures in dual GPU optimization systems
globs: **/*.py,**/*.ipynb
alwaysApply: false
---


# data-flow-architecture

The dual GPU optimizer implements a multi-layered data flow architecture for managing GPU resource optimization and model execution:

Core Data Flow Components:

1. GPU Telemetry Pipeline
- Data Source: NVML GPU metrics collection
- Flow: Raw GPU metrics -> Telemetry Service -> Event Bus -> Dashboard
- Metrics: Utilization, memory, temperature, power, clocks, PCIe bandwidth
- File: dualgpuopt/telemetry.py

2. Model Optimization Flow 
- Input: Model configuration parameters
- Processing: Memory calculator -> Split optimizer -> Command generator
- Output: Framework-specific launch configurations
- Files: dualgpuopt/optimizer.py, dualgpuopt/commands/gpu_commands.py

3. Memory Management Pipeline
- Sources: GPU memory monitors, model profilers
- Data Processing: Usage prediction -> Recovery planning -> Execution
- Key Metrics: Memory pressure, usage patterns, growth projections
- Files: dualgpuopt/memory/predictor.py, dualgpuopt/memory/recovery.py

4. Event Distribution System
- Core Events: GPUMetricsEvent, ModelEvent, ConfigEvent
- Priority-based routing with domain-specific handlers
- Bidirectional flows between UI and GPU services
- File: dualgpuopt/services/event_bus.py

5. Configuration Flow
- Settings -> Config Service -> Component Updates
- GPU-specific parameter validation and distribution
- Real-time configuration synchronization
- File: dualgpuopt/services/config_service.py

Integration Points:
- GPU Metrics -> Dashboard visualization
- Memory Predictions -> Batch size optimization
- Model Parameters -> Launch configuration generation
- Settings -> GPU overclocking management

The architecture emphasizes real-time data flow for GPU monitoring and optimization, with specialized pipelines for different aspects of GPU resource management and model execution.

$END$