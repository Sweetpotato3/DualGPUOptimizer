---
description: Documents data flow patterns between components for GPU resource optimization, command generation, and metrics monitoring
globs: **/*.py,**/services/**,**/commands/**,**/gui/**
alwaysApply: false
---


# data-flow-architecture

## Core Data Flow Components

### GPU Resource Data Flow
- GPU memory and utilization metrics flow from NVML/GPU drivers through telemetry service
- Metrics processed through middleware pipeline before reaching UI components and event bus
- `gpu_info.py` feeds real-time GPU data to optimization services and dashboard displays
- Periodic polling ensures metrics stay updated with configurable intervals (500ms-2000ms)

### Optimization Data Pipeline
- Model configuration flows from UI inputs to parameter resolver service
- Parameter resolver generates optimized launch configurations 
- Launch configurations flow to command generator for framework-specific commands
- Commands flow back to UI for display and execution

### Monitoring Metrics Flow
- GPU metrics flow from telemetry service to event bus subscribers
- Event bus distributes metrics to:
  - Dashboard for visualization
  - Logger for persistence
  - Optimizer for dynamic adjustments
- Status updates flow through event system to notify UI components

### State Management Flow
- Application state managed by centralized state service
- State changes propagate through event bus to registered components
- UI components subscribe to relevant state updates
- Settings persist through configuration service

## Key Data Flow Paths

1. GPU Resource Collection Path:
```
NVML/Drivers -> gpu_info.py -> telemetry.py -> event_bus.py -> Subscribers
```

2. Optimization Configuration Path:
```
UI Input -> parameter_resolver.py -> optimizer.py -> command_generator.py -> UI Display
```

3. Metrics Monitoring Path:
```
telemetry.py -> event_bus.py -> {dashboard.py, logger.py, optimizer.py}
```

## Critical Files

### Data Collection
- `dualgpuopt/gpu_info.py`: GPU resource data collection
- `dualgpuopt/telemetry.py`: Telemetry processing pipeline

### Data Distribution
- `dualgpuopt/services/event_bus.py`: Event-based data distribution
- `dualgpuopt/services/state_service.py`: State management 

### Data Consumption
- `dualgpuopt/gui/dashboard.py`: Metrics visualization
- `dualgpuopt/optimizer.py`: Resource optimization
- `dualgpuopt/commands/gpu_commands.py`: Command generation

$END$