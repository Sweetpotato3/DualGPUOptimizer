---
description: Documents data flow between components for multi-GPU optimization, resource tracking, and workload distribution
globs: dual_gpu_optimizer/dualgpuopt/**/*.py
alwaysApply: false
---


# data-flow-architecture

Core data flows in the dual GPU optimization system:

1. GPU Metrics Flow
- Source: GPU hardware sensors via NVML
- Path: telemetry.py -> event_bus.py -> event_dashboard.py
- Metrics include:
  * Utilization rates
  * Memory usage
  * Temperature
  * Power consumption
  * Fan speeds
- 60-sample historical buffer maintained

2. Optimization Parameter Flow
- Source: optimizer.py, layer_balance.py
- Path: optimizer.py -> state_service.py -> gpu_commands.py
- Key parameters:
  * Tensor split ratios
  * Layer distribution weights
  * Memory allocation quotas
  * Clock speed offsets

3. Model Configuration Flow
- Source: configio.py, ctx_size.py
- Path: configio.py -> launcher.py -> runner.py
- Configurations include:
  * Context size calculations
  * Model architecture parameters
  * Framework-specific settings (llama.cpp/vLLM)

4. Resource Management Flow
- Source: gpu_info.py, mpolicy.py
- Path: gpu_info.py -> state_service.py -> smart_batch.py
- Resources tracked:
  * VRAM allocation
  * Compute capacity
  * Power limits
  * Temperature thresholds

5. Error Handling Flow
- Source: error_service.py
- Path: error_service.py -> event_bus.py -> state_service.py
- Handles:
  * GPU hardware errors
  * Out of memory conditions
  * Temperature warnings
  * Power limit violations

Key Integration Points:

1. Hardware Interface Layer
- File: gpu_info.py
- Importance: 95
- Bridges hardware metrics to optimization system

2. Event Distribution System
- File: event_bus.py
- Importance: 85
- Routes GPU events and metrics through system

3. State Management
- File: state_service.py
- Importance: 90
- Maintains optimization parameters and GPU configurations

4. Resource Optimization
- Files: optimizer.py, layer_balance.py
- Importance: 95
- Implements core balancing algorithms

$END$