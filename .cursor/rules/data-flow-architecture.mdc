---
description: Used when analyzing or documenting the data flow architecture and dependencies between components in the DualGPUOptimizer project.
globs: dualgpuopt/**/telemetry.py,dualgpuopt/**/memory/*.py,dualgpuopt/**/gpu/*.py,dualgpuopt/**/services/*.py
alwaysApply: false
---


# data-flow-architecture

## Core Data Flow Components

### GPU Telemetry Pipeline
- GPU metrics flow from hardware through NVML to telemetry service
- Metrics include: utilization, memory usage, temperature, power consumption
- Data flows through EventBusMiddleware to publish metrics as events
- LoggingMiddleware captures telemetry data for debugging
- File: `dualgpuopt/telemetry.py`

### Memory Management Flow
- Memory alerts flow from MemoryMonitor to registered alert handlers
- Memory usage predictions flow to recovery strategies
- Recovery actions flow back to affected GPU components
- Files: 
  - `dualgpuopt/memory/alerts.py`
  - `dualgpuopt/memory/monitor.py`
  - `dualgpuopt/memory/recovery.py`

### State Management Service
- Centralized state flows from StateService to subscribed components
- GPU settings and configurations flow through state updates
- Event bus publishes state changes to dependent modules
- File: `dualgpuopt/services/state_service.py`

### Layer Distribution Flow
- Layer profiling data flows from LayerProfiler to optimization logic
- Performance metrics flow to layer distribution algorithms
- Device mapping flows to model deployment components
- Files:
  - `dualgpuopt/layer_balance.py`
  - `dualgpuopt/optimizer.py`

### Command Generation Pipeline
- Model parameters flow from UI to command generators
- GPU split calculations flow to framework-specific commands
- Generated commands flow to process execution system
- Files:
  - `dualgpuopt/commands/gpu_commands.py`
  - `dualgpuopt/commands/command_base.py`

### Event Bus Architecture
- GPU metrics events flow from telemetry to dashboard
- Memory alerts flow from monitor to recovery system
- State changes flow from services to UI components
- File: `dualgpuopt/services/event_bus.py`

## Critical Data Dependencies

1. GPU Telemetry → Memory Monitor
- Utilization metrics
- Memory usage stats
- Temperature data

2. Memory Monitor → Recovery System
- Alert triggers
- Usage predictions
- Recovery actions

3. State Service → UI Components
- Configuration updates
- GPU settings
- Theme changes

4. Layer Profiler → Optimizer
- Performance metrics
- Layer timings
- Device mappings

5. Command Generator → Process Runner
- Framework commands
- GPU configurations
- Environment variables

The data flow architecture emphasizes real-time GPU metric monitoring, memory management, and state synchronization across components. The event-driven design ensures efficient propagation of critical data between modules.

$END$