---
description: Documents data flow between components for GPU resource management, optimization, and monitoring
globs: dual_gpu_optimizer/dualgpuopt/**/*.py
alwaysApply: false
---


# data-flow-architecture

## Core Data Flows (Importance: 95)

GPU Resource Data Flow:
- NVML library → `gpu_info.py` → Concurrent GPU data collection
- `gpu_info.py` → GPU dataclass → `optimizer.py` for workload distribution
- GPU metrics stream → `telemetry.py` → Real-time visualization in `gui.py`

Optimization Parameter Flow:
- User inputs (model path, context size) → `gui.py`
- `gui.py` → `optimizer.py` → GPU split calculations
- `optimizer.py` → Environment configuration → LLM framework commands

## Monitoring Pipeline (Importance: 85)

Telemetry Data Flow:
- `telemetry.py` polls NVML metrics
- Metrics forwarded to visualization components
- Historical data maintained in fixed-size window
- Alert thresholds trigger notifications via `tray.py`

## Configuration Flow (Importance: 75)

Settings Distribution:
- Theme preferences → `gui.py` → Persistent storage
- Monitoring parameters → `telemetry.py` → Alert system
- Logging levels → `logconfig.py` → Application-wide logging

## Command Generation Flow (Importance: 80)

LLM Framework Integration:
- GPU configuration → Tensor fraction calculations
- Optimization parameters → Framework-specific commands
- Environment variables → Command line generation
- Commands → `runner.py` for execution

$END$