---
description: Specifies data flow patterns between GPU optimization components, telemetry systems, and monitoring services
globs: dualgpuopt/telemetry/*,dualgpuopt/memory/*,dualgpuopt/engine/*,dualgpuopt/services/*,dualgpuopt/gui/*
alwaysApply: false
---


# data-flow-architecture

Core Data Flow Components:

1. Telemetry Pipeline Architecture
- Metrics Collection: GPU utilization, memory, temperature, power consumption collected by telemetry.py
- Centralized event bus distributes metrics to visualization components
- Rolling 60-second buffer maintains historical metrics in telemetry_history.py
- Thresholds trigger alerts through event system:
  * EMERGENCY: Memory ≥95% or Temperature ≥90°C
  * CRITICAL: Memory ≥90% or Temperature ≥80°C
  * WARNING: Memory ≥75% or Temperature ≥70°C

2. Memory Profiling Flow
- Sessions track inference-specific memory patterns and token counts
- Per-GPU timelines maintain snapshots for analysis
- Linear regression on usage windows detects:
  * Rapid growth spikes (immediate alerts)
  * Gradual leaks (sustained growth)
- Inference boundaries trigger memory delta calculations
- Results published to profiling dashboard

3. Engine Pool Data Flow
- Model loading triggers cache analysis/eviction
- Health checks propagate status through event bus
- Metrics collection includes:
  * Cache hits/misses
  * Load times
  * Health check results
- Results feed into prometheus metrics

4. GPU Command Pipeline
- Optimizer generates tensor parallel configurations
- Layer balancing algorithm determines distribution
- Results flow to command generation
- Commands propagate to process management

5. Recovery Data Flow
- Memory pressure triggers progressive recovery:
  * Cache clearing
  * Process termination
  * System commands
- Results feed back to monitoring system

Key Files:
- dualgpuopt/telemetry.py: Core metrics collection
- dualgpuopt/memory/profiler.py: Memory analysis
- dualgpuopt/engine/pool/core.py: Model caching
- dualgpuopt/services/event_bus.py: Event distribution
- dualgpuopt/services/telemetry.py: Metrics processing

$END$
