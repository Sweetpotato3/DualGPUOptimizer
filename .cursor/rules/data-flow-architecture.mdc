---
description: Documents data flow patterns between components for GPU optimization and monitoring systems.
globs: 
alwaysApply: false
---


# data-flow-architecture

## Core Data Flow Components

1. Telemetry Pipeline
- GPU metrics flow from NVML through telemetry service to UI components
- Real-time metrics include: utilization, memory, temperature, power consumption
- telemetry_history.py maintains 60-second rolling buffer of metrics
- Dashboard components consume metrics via event bus subscription
- File path: dualgpuopt/telemetry.py

2. Memory Profiling Flow
- Memory events flow from GPU allocation hooks to profiler service
- Profiler tracks memory timelines and leak detection analysis
- Generates inference session reports with memory deltas
- Dashboard visualizes memory patterns in real-time
- File path: dualgpuopt/memory/profiler.py

3. Optimization Data Pipeline
- Model parameters and GPU capabilities flow into optimizer
- Optimizer generates tensor split configurations and command templates
- Results flow to launcher for model execution
- File path: dualgpuopt/optimizer.py

4. Event Bus Architecture  
- Centralized event bus routes telemetry data, alerts, and state changes
- Components communicate through typed events with priority levels
- Publishers: Telemetry service, memory profiler, error handler
- Subscribers: Dashboard, optimizer, launcher components
- File path: dualgpuopt/services/event_bus.py

5. Resource Configuration Flow
- GPU resource data flows from NVML to configuration service
- Optimizer consumes configuration to determine memory splits
- Launcher receives optimized configurations for model execution
- File path: dualgpuopt/configio.py

6. Alert Propagation
- Memory alerts flow from profiler to event bus
- Temperature/utilization alerts from telemetry service
- Critical alerts propagate to system tray and UI
- Alert thresholds configurable per metric type
- File path: dualgpuopt/services/alerts.py

## Key Integration Points

1. Telemetry-to-Dashboard Flow
- Raw GPU metrics transformed into visualization data
- 60-second history window maintained
- Real-time graph updates via event subscription
- File path: dualgpuopt/gui/dashboard.py

2. Profiler-to-Optimizer Flow  
- Memory profiles inform tensor split calculations
- Leak detection triggers optimization adjustments
- File path: dualgpuopt/memory/profiler.py

3. Optimizer-to-Launcher Flow
- Optimized configurations flow to model launcher
- Generated commands include GPU assignments
- File path: dualgpuopt/gui/launcher.py

The data flow architecture centers around real-time GPU metric collection and optimization, with event-driven updates propagating through the system. Components maintain loose coupling through the event bus while sharing critical resource data.

$END$