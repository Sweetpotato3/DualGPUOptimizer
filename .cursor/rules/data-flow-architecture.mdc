---
description: Standardizes dataflow documentation for GPU optimization systems including resource monitoring, model inference, and status reporting
globs: **/*.py,**/*.cfg,**/*.toml,**/dualgpuopt/**
alwaysApply: false
---


# data-flow-architecture

## Core Data Flow Components

### 1. GPU Metrics Collection Pipeline
- Telemetry service (dualgpuopt/telemetry.py) collects raw GPU metrics:
  - Memory utilization with custom thresholds (75%, 90%, 95%)  
  - Temperature data (70°C, 80°C, 90°C warnings)
  - Power consumption metrics (90%, 98% power limit alerts)
  - Fan speeds and clock rates
- Data flows through event bus to monitoring components
- Recovery logic with exponential backoff handles collection failures

### 2. Memory Management Flow
- Memory profiler (dualgpuopt/memory/profiler.py) analyzes metrics:
  - Real-time leak detection using sliding window analysis
  - Linear regression identifies concerning patterns:
    - Spike detection for rapid growth (configurable threshold)
    - Leak detection for sustained growth
  - Session-based memory delta tracking
  - Custom timeline management per GPU
  - Alert rate limiting with 30s cooldown

### 3. Optimizer Data Pipeline
- Layer balance calculator determines optimal split:
  - Receives GPU capabilities and model requirements
  - Calculates tensor fractions and memory split ratios
  - Generates framework-specific launch configurations
- Context size optimizer determines safe limits:
  - Analyzes available GPU memory
  - Considers model architecture parameters
  - Applies safety margins and overhead factors
- Results flow to launcher components

### 4. Status Reporting Chain
- GPU metrics flow through event bus
- Dashboard receives real-time updates via subscriptions
- System tray shows critical alerts
- Status persistence service maintains history

### 5. Model Execution Flow
- Launcher receives optimized configurations
- Handles framework-specific command generation
- Monitors execution metrics and resource usage
- Reports status back through event system

### Key Data Paths:
```
GPU Hardware -> Telemetry Service -> Event Bus -> 
  |-> Memory Profiler -> Alerts
  |-> Optimizer -> Launch Configs
  |-> Dashboard -> UI Updates
  |-> Status History
```

Importance Score: 95 (Critical data flow architecture for core GPU optimization functionality)

$END$