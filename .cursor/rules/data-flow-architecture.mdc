---
description: Defines data flow patterns and architecture for GPU resource monitoring, optimization metrics, and component communication.
globs: **/*.py,**/services/**/*.py,**/commands/**/*.py
alwaysApply: false
---


# data-flow-architecture

### Core Data Flow Components

1. GPU Telemetry Pipeline
- **TelemetryService** collects real-time GPU metrics including utilization, memory, temperature
- Metrics flow through configurable middleware chain for processing
- Event bus publishes metrics to registered subscribers
- Data flows to visualization components and monitoring systems
- File: `dualgpuopt/telemetry.py`

2. State Management
- Centralized state service manages application configuration and GPU settings
- State changes trigger events for UI updates and optimization recalculation
- Components subscribe to specific state keys
- File: `dualgpuopt/services/state_service.py`

3. Command Generation Pipeline
- GPU split calculator determines optimal tensor distribution
- Results flow to command generator for framework-specific formatting
- Generated commands transmitted to launcher component
- Files: `dualgpuopt/commands/gpu_commands.py`

4. Memory Monitoring Flow
- Memory predictor estimates usage based on model profiles
- Alerts flow through recovery manager when thresholds exceeded
- Recovery strategies executed based on severity
- Files: `dualgpuopt/memory/predictor.py`, `dualgpuopt/memory/recovery.py`

5. Event Bus Architecture 
- Central event bus coordinates component communication
- Components publish domain events (GPUMetricsEvent, ModelSelectedEvent)
- Subscribers receive filtered events based on type/priority
- File: `dualgpuopt/services/event_bus.py`

### Key Data Flows

1. GPU Metrics Flow:
```
GPU Hardware -> Telemetry Service -> Middleware Chain -> Event Bus -> UI Components
```

2. Optimization Command Flow:
```
Model Selection -> Split Calculator -> Command Generator -> Launcher
```

3. Memory Management Flow:
```
Memory Monitor -> Predictor -> Alert System -> Recovery Manager
```

4. Configuration Flow:
```
State Service -> Event Bus -> Component Updates
```

$END$