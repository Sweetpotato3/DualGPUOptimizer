---
description: Technical specification for data flow and communication patterns in a dual GPU optimization system for machine learning models.
globs: **/dualgpuopt/**/*.py,**/dual_gpu_optimizer/**/*.py,**/*.py
alwaysApply: false
---


# data-flow-architecture

Core Data Flow Components:

1. GPU Metrics Pipeline
- Event-driven architecture for real-time GPU telemetry
- Components communicate through GPUMetricsEvent objects containing:
  * Utilization percentages
  * Memory allocation status
  * Temperature/power readings
  * Clock speeds
- Event priority system (CRITICAL to LOW) for resource monitoring
- Implementations in:
  * dualgpuopt/telemetry.py
  * dualgpuopt/services/event_bus.py

2. Memory Management Pipeline
- Memory prediction and allocation system across GPUs 
- Tracks model-specific parameters:
  * Base memory requirements
  * Per-batch memory scaling
  * Token-based consumption
- Recovery strategy pipeline:
  1. Cache clearing
  2. Batch size reduction
  3. Model offloading
- Implementations in:
  * dualgpuopt/memory/predictor.py
  * dualgpuopt/memory/recovery.py

3. Optimization Data Flow
- Layer balancing optimization pipeline
- Performance profiling across GPUs using timing measurements
- Distribution algorithm pipeline:
  1. Performance quota calculation
  2. Layer assignment prioritization
  3. Block optimization for contiguous layers
- Implementations in:
  * dualgpuopt/layer_balance.py
  * dualgpuopt/optimizer.py

4. Model Parameter Flow
- Framework-specific command generation pipeline
- Model configuration data flow:
  * Context size parameters
  * Layer counts and dimensions
  * GPU split configurations
  * Tensor parallel settings
- Implementations in:
  * dualgpuopt/gui/launcher/parameter_resolver.py
  * dualgpuopt/commands/gpu_commands.py

Data Flow Architecture Score: 95
Justification: Critical system component managing core business data flow between GPU optimization components

$END$