---
description: Documents data flow patterns and architectures for GPU resource management and optimization systems
globs: **/*.py,**/dualgpuopt/**
alwaysApply: false
---


# data-flow-architecture

Core Data Flow Components:

1. GPU Telemetry Pipeline (Importance: 95)
File: dualgpuopt/telemetry.py

Data flows from GPU hardware through multiple stages:
- Raw metrics collection (utilization, memory, temperature)
- Middleware transformation pipeline
- Event bus distribution system
- Real-time dashboard visualization

2. Model Memory Management Flow (Importance: 90)
File: dualgpuopt/memory_monitor.py

Implements multi-stage memory optimization:
- Model profile data -> Memory requirement calculator
- Memory pressure detection -> Alert system
- Recovery strategy selector -> Memory reclamation actions
- Telemetry feedback loop for effectiveness monitoring

3. Layer Distribution Pipeline (Importance: 85)
File: dualgpuopt/layer_balance.py

Orchestrates model layer distribution:
- Model architecture analysis -> Layer profiling
- Performance metrics collection -> Load balancing algorithm
- GPU capability assessment -> Resource allocation
- Command generation -> Framework-specific deployment

4. Optimization Parameter Flow (Importance: 80)
Files: 
- dualgpuopt/optimizer.py
- dualgpuopt/mpolicy.py

Manages optimization parameter propagation:
- GPU configuration data -> Memory split calculator
- Model requirements -> Tensor parallelism configurator
- Hardware constraints -> Command parameter generator

5. Event Distribution System (Importance: 75)
File: dualgpuopt/services/event_bus.py

Implements hierarchical event flow:
- GPU metrics -> Event transformation
- Priority-based routing
- Subscriber notification chains
- Metric aggregation for dashboard updates

6. State Management Flow (Importance: 70)
File: dualgpuopt/services/state_service.py

Coordinates system state:
- GPU settings -> Configuration store
- Idle detection data -> Resource optimizer
- Model paths -> Launch configuration
- Settings persistence -> Storage system

Key Integration Points:
- GPU hardware interfaces feed into telemetry system
- Memory monitor integrates with GPU command generation
- Layer balancer coordinates with optimizer for resource allocation
- Event bus provides metrics to visualization components

$END$