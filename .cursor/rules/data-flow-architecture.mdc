---
description: Analyze and document data flow between components, including GPU resource data, optimization parameters, and monitoring metrics
globs: dualgpuopt/**,dual_gpu_optimizer/**,integrated_app/**,hooks/**,*.py
alwaysApply: false
---


# data-flow-architecture

The data flow architecture comprises several key streams:

1. GPU Telemetry Flow
- Telemetry service collects GPU metrics (utilization, memory, temperature)
- Data flows through event bus to dashboard components
- Dashboard updates visualization components at configurable intervals (500ms-1000ms)
- Telemetry data cached in rolling 60-sample history for trend analysis

2. Model Optimization Flow
- Model parameters and configurations flow from UI inputs to optimizer
- Optimizer calculates GPU splits and generates framework-specific commands 
- Commands flow to launcher component for execution
- Status and errors flow back through event bus to UI

3. Memory Management Flow 
- Memory monitor tracks GPU memory usage in real-time
- Usage data flows to predictor component for OOM prevention
- Recovery strategies triggered based on memory thresholds
- Recovery commands flow back to model execution components

4. Configuration Flow
- Settings flow from UI components to state service
- State changes propagate through event bus to subscribed components
- Config persisted to disk and loaded on startup
- Theme and appearance settings flow to UI components

Key Data Paths:
```
GPU Metrics -> Event Bus -> Dashboard
Model Config -> Optimizer -> Launcher
Memory Usage -> Predictor -> Recovery
Settings -> State Service -> Components
```

File Paths Containing Core Flow Logic:
- dualgpuopt/telemetry.py: GPU metric collection and distribution
- dualgpuopt/services/event_bus.py: Central event distribution
- dualgpuopt/memory/predictor.py: Memory usage prediction
- dualgpuopt/services/state_service.py: Configuration state management

The architecture emphasizes real-time data flow for GPU monitoring and optimization, with the event bus providing decoupled communication between components.

$END$