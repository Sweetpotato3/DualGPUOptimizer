---
description: Describes data flow patterns and architecture for dual GPU optimization system with focus on resource management and model inference
globs: **/*.py,**/dualgpuopt/**
alwaysApply: false
---


# data-flow-architecture

## Core Data Flow Components

### Model Parameter Data Flow
1. Initial parameter detection from model filenames:
- Architecture parameters extracted (layers, heads, dimensions) 
- Quantization type identified
- Framework type determined (llama.cpp vs vLLM)

2. Parameter transformation:
```
Model Parameters -> Optimization Parameters -> Launch Configuration
```
- Raw parameters converted to device-specific settings
- Memory requirements calculated per device
- Launch parameters generated based on framework

### GPU Resource Data Flow
1. Primary telemetry collection:
- Memory utilization metrics
- Compute utilization data  
- Temperature/power data
- PCIe bandwidth metrics

2. Resource optimization pipeline:
```
Raw Metrics -> Analysis -> Split Ratios -> Device Maps
```
- Real-time metrics processed through profiling system
- Layer performance data analyzed
- Optimal split ratios calculated
- Device maps generated for model deployment

### Optimization Metrics Flow
1. Performance data collection:
- Layer execution times
- Memory pressure metrics
- Batch processing rates
- Temperature thresholds

2. Optimization feedback loop:
```
Metrics -> Adjustments -> New Parameters -> Performance Validation
```
- Performance metrics trigger automatic adjustments
- New parameters propagated to launch system
- Results validated against performance targets

## Key Integration Points

### Framework Integration
1. llama.cpp integration:
```
Split Configuration -> GPU Commands -> Launch Parameters
```
- GPU split strings generated
- Layer allocation determined
- Context size parameters set

2. vLLM integration:
```
Tensor Config -> Parallel Setup -> Launch Config
```
- Tensor parallelism degree set
- GPU device mapping created
- Memory utilization parameters configured

### Monitoring Pipeline
1. System metrics flow:
```
Raw GPU Data -> Event Bus -> UI Components
```
- GPU metrics collected via NVML
- Data processed through event system
- Metrics propagated to visualization components

2. Alert propagation:
```
Thresholds -> Event Generation -> Handler Execution
```
- Performance thresholds monitored
- Events generated for violations
- Handlers execute corrective actions

$END$