---
description: Technical specifications for GPU resource monitoring, optimization parameters, and telemetry data flow between system components
globs: dual_gpu_optimizer/dualgpuopt/*.py,*.py
alwaysApply: false
---


# data-flow-architecture

Core data flows in the DualGPUOptimizer system center around GPU resource management and optimization parameters:

### GPU Resource Data Flow (Importance: 95)
- NVML interface collects GPU data via `gpu_info.py`
- Raw GPU metrics flow to telemetry collector in `telemetry.py`
- Telemetry stream broadcasts to visualization components and idle detection
- Mock GPU data can be injected via environment variables for testing

### Optimization Parameter Flow (Importance: 90)
- Model configuration and context sizes flow from UI inputs to optimizer
- `optimizer.py` transforms parameters into GPU split configurations
- Split configurations generate environment variables and command strings
- Command strings flow to runner for execution

### Monitoring Data Pipeline (Importance: 85)
- Real-time GPU utilization metrics flow from telemetry to visualization
- Chart component maintains 2-minute history buffer of GPU loads
- Alert thresholds and durations flow from configuration to monitoring system
- Idle detection watches telemetry stream for triggering notifications

### Configuration Data Flow (Importance: 75)
- User preferences for themes and monitoring settings flow to persistent storage
- Model paths and presets flow between UI and command generation
- Alert configurations flow from UI to monitoring subsystem
- Environment file parameters flow to shell script generation

Key data flow paths:
```
GPU Hardware -> NVML Interface -> Telemetry Collector -> Visualization/Monitoring
User Input -> Optimizer -> Command Generator -> Runner
Configuration -> Persistent Storage -> System Components
```

$END$