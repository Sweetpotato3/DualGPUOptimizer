---
description: Analyze data flow between components and implement GPU resource data, optimization parameters, monitoring metrics in DualGPUOptimizer
globs: dualgpuopt/**/*.py,integrated_app/**/*.py,dual_gpu_optimizer/**/*.py
alwaysApply: false
---


# data-flow-architecture

The DualGPUOptimizer implements a multi-layered data flow architecture for managing GPU resources and optimizing model execution:

## Core Data Flow Components

1. GPU Telemetry Pipeline
- GPU metrics flow from hardware through NVML to TelemetryService
- Metrics include: utilization, memory usage, temperature, power, clocks 
- Service publishes metrics to EventBus for dashboard consumption
- File: `dualgpuopt/telemetry.py`

2. Model Parameter Flow
- Model configuration flows from UI through ParameterResolver
- Resolver calculates optimal parameters based on GPU capabilities
- Parameters flow to LaunchController for model execution
- File: `dualgpuopt/gui/launcher/parameter_resolver.py`

3. Optimization Pipeline
- GPU split ratios flow from Optimizer to CommandGenerator
- Memory requirements flow from ModelValidator to Optimizer
- Generated commands flow to ProcessMonitor for execution
- File: `dualgpuopt/optimizer.py`

4. Memory Management Flow
- Memory usage metrics flow from Monitor to MemoryPredictor
- Predictions trigger RecoveryManager actions when thresholds exceeded
- Recovery commands flow back to affected GPUs
- Files:
  - `dualgpuopt/memory/predictor.py`
  - `dualgpuopt/memory/recovery.py`

5. Event Distribution System
- GPU metrics flow through EventBus to subscribed components
- State changes propagate via StateService to UI components
- Error events flow through ErrorHandler to UI notifications
- Files:
  - `dualgpuopt/services/event_bus.py`
  - `dualgpuopt/services/state_service.py`

## Key Data Transformations

1. Model Parameter Optimization
```
UI Input -> ParameterResolver -> Optimizer -> CommandGenerator -> Execution
```

2. GPU Metric Processing
```
Hardware -> NVML -> TelemetryService -> EventBus -> Dashboard
```

3. Memory Management
```
Monitor -> Predictor -> RecoveryManager -> GPU Actions
```

The architecture emphasizes real-time data flow for GPU monitoring and optimization, with clear separation between data collection, processing, and visualization components.

$END$