---
description: Documents data flows between GPU optimization components including resource metrics, parameters, and monitoring data
globs: dualgpuopt/**/*.py,integrated_app/**/*.py
alwaysApply: false
---


# data-flow-architecture

Primary Data Flow Components:

1. GPU Telemetry Pipeline
- GPU metrics flow from hardware monitoring through NVML interface 
- Metrics include memory usage, temperature, utilization, power draw
- Data flows through telemetry service to dashboard and optimizer components
- Event bus handles real-time metric distribution to subscribers
Path: dualgpuopt/telemetry.py

2. Model Parameter Flow
- Configuration parameters flow from UI to optimizer engine
- Includes context sizes, layer counts, attention head configurations
- GPU split ratios and tensor parallel settings propagate to launcher
- Validation results flow back to UI components
Path: dualgpuopt/optimizer.py

3. Memory Profiling Data Flow
- Memory usage metrics flow from profiler to analysis engine
- Event classification and pattern detection results propagate to UI
- Memory leak alerts flow through event system to notification handlers
Path: dualgpuopt/memory/profiler.py

4. Command Generation Pipeline
- Model parameters flow into command generator component
- Framework-specific optimizations applied based on model architecture
- Generated commands flow to launcher component for execution
Path: dualgpuopt/commands/gpu_commands.py

5. Resource Monitoring Flow
- Real-time GPU metrics flow through event bus architecture
- Performance data aggregated in monitoring service
- Alert thresholds trigger notifications through event system
- Resource optimization recommendations flow to UI components
Path: dualgpuopt/gpu/monitor.py

Key Integration Points:
- Event bus provides central hub for metric distribution
- State service maintains synchronized configuration state
- Memory profiler feeds optimization engine with usage patterns
- Telemetry service coordinates real-time resource monitoring

Data Flow Importance Scores:
- GPU Telemetry Pipeline: 95 (Core monitoring functionality)
- Model Parameter Flow: 90 (Critical for optimization)
- Memory Profiling: 85 (Key for resource management)
- Command Generation: 80 (Essential for execution)
- Resource Monitoring: 75 (Important for system health)

$END$