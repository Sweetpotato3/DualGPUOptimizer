---
description: Data flow specification for dual GPU optimization system managing GPU resources, model parameters, and performance metrics
globs: dualgpuopt/**/*.py,integrated_app/**/*.py,dual_gpu_optimizer/**/*.py
alwaysApply: false
---


# data-flow-architecture

## Core Data Flow Components

### 1. GPU Resource Telemetry Pipeline
- GPU metrics collection from NVML/mock sources via telemetry.py
- Real-time metrics including memory usage, utilization, temperature propagated through event bus
- Metrics processed by dashboard for visualization and optimizer for resource allocation
- Early warning detection system for memory pressure and temperature thresholds

### 2. Model Parameter Flow
- Model configuration parameters flow from optimizer to launch controller
- Tensor parallel size and GPU split ratios calculated based on available resources
- Framework-specific command generation for llama.cpp and vLLM deployments
- Dynamic adjustment of batch sizes and context lengths based on memory monitoring

### 3. Memory Management Pipeline
- Memory profiler tracks allocation patterns across multiple GPUs
- Leak detection using sliding window analysis and linear regression
- Memory events classified into allocation/deallocation/growth spikes
- Recovery actions triggered based on memory pressure thresholds

### 4. Performance Metrics Flow
- Token processing speed (TPS) metrics from model inference
- GPU utilization correlation with memory consumption patterns
- Temperature/power metrics flow to UI components for visualization
- PCIe bandwidth monitoring for inter-GPU communication

### 5. Event Distribution System
- Event bus manages distribution of GPU metrics, configuration changes
- State service maintains application configuration and GPU settings
- Config service handles persistent storage of optimization parameters
- Smart batch processing coordinates workload distribution

Key File Paths:
```
dualgpuopt/
  memory/profiler.py - Memory tracking and leak detection
  telemetry.py - GPU metrics collection and processing
  services/event_bus.py - Event distribution system
  batch/smart_batch.py - Batch processing optimization
  optimizer.py - GPU resource allocation logic
```

$END$