---
description: Defines data flow patterns for GPU resource management, optimization parameters, and monitoring metrics across the system
globs: dual_gpu_optimizer/dualgpuopt/**/*.py
alwaysApply: false
---


# data-flow-architecture

## Core Data Flows (Importance: 95)

### GPU Telemetry Flow
- GPU metrics collected via NVML interface in `gpu_info.py`
- Telemetry stream generated in `telemetry.py` using background thread
- Data queued to `tele_q` for dashboard consumption
- Dashboard processes metrics every second from queue
- Historical data maintained for 60 samples in dashboard graphs

### Configuration Data Flow
- GPU overclocking settings flow from GUI to persistent storage
- Theme configurations propagate through widget hierarchy
- Application settings persisted via `configio.py`
- Mock GPU data injection flow when `DGPUOPT_MOCK_GPUS` enabled

### Optimization Parameter Flow
- Model configuration flows from JSON presets to optimizer
- GPU memory splits calculated and propagated to command generation
- Tensor fractions computed based on GPU memory distribution
- Environment variables generated and saved to .env files
- Framework-specific commands (llama.cpp, vLLM) generated from parameters

## Component Communication (Importance: 85)

### Dashboard Updates
File: `dual_gpu_optimizer/dualgpuopt/gui/dashboard.py`
- Telemetry queue -> Dashboard processor
- Metrics update -> UI elements 
- Historical data -> Graph renderer

### Settings Propagation 
File: `dual_gpu_optimizer/dualgpuopt/gui/settings.py`
- GUI inputs -> Configuration storage
- Stored settings -> GPU controls
- Theme selection -> Widget styling

### Optimizer Data Path
File: `dual_gpu_optimizer/dualgpuopt/optimizer.py`
- GPU info -> Split calculator
- Memory data -> Tensor fraction generator
- Configuration -> Environment file writer
- Parameters -> Command string builder

## Key Integration Points (Importance: 80)

### GPU Resource Management
Files:
- `dual_gpu_optimizer/dualgpuopt/gpu_info.py`
- `dual_gpu_optimizer/dualgpuopt/telemetry.py`
```
GPU Hardware <-> NVML Interface <-> Telemetry Collector <-> Application Logic
```

### Command Generation Pipeline
Files:
- `dual_gpu_optimizer/dualgpuopt/gui/optimizer_tab.py`
- `dual_gpu_optimizer/dualgpuopt/gui/launcher.py`
```
Model Selection -> GPU Split Calculation -> Environment Generation -> Command Construction
```

$END$