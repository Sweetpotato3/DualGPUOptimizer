---
description: Specification for GPU optimization data flow architecture, telemetry collection, and metrics processing across system components
globs: **/services/*.py,**/gui/*.py,**/metrics.py,**/telemetry.py,**/gpu_info.py
alwaysApply: false
---


# data-flow-architecture

### Core Data Flow Components

1. GPU Telemetry Pipeline
- GPUs → GPU Info Collection (`gpu_info.py`) → Telemetry Service (`telemetry.py`) → Event Bus → Dashboard/UI
- Collects real-time metrics: utilization, memory, temperature, power usage
- Data processed through middleware pipeline with EventBus and Logging handlers
- Metrics published to subscribers using priority-based event dispatch

2. Configuration Flow
- Config Service → Event Bus → UI Components
- Manages GPU optimization settings, overclocking profiles
- Configuration changes trigger `config_changed` events
- Settings automatically propagated to dependent components

3. State Management Flow
- State Service → Event Bus → UI/Command Components 
- Centralized state updates for GPU status and optimization parameters
- State changes trigger typed events with specific keys
- Components subscribe to relevant state changes

4. Optimization Data Flow
- GPU Commands → Event Bus → State Service → UI
- Overclocking and optimization commands generate result events
- Results update application state and trigger UI refresh
- Command history tracked for undo/redo operations

5. Metrics Collection Pipeline
- GPU Metrics → Prometheus Collectors → External Monitoring
- Optional integration with Prometheus for metrics export
- Histograms for batch latency and queue depth
- Fallback collectors when Prometheus unavailable

### Key Data Structures

1. GPU Telemetry Data
```python
{
  'utilization': float,
  'memory_used': int,
  'temperature': int,
  'power_usage': float,
  'clock_speed': int
}
```

2. Configuration Data
```python
{
  'gpu_settings': dict,
  'optimization_params': dict,
  'monitoring_config': dict
}
```

3. State Data
```python
{
  'gpu_status': dict,
  'active_profile': str,
  'command_history': list
}
```

### File Paths for Core Components
- Telemetry: `dualgpuopt/telemetry.py`
- Event Bus: `dualgpuopt/services/event_bus.py` 
- State Service: `dualgpuopt/services/state_service.py`
- Config Service: `dualgpuopt/services/config_service.py`
- Metrics: `dualgpuopt/metrics.py`

$END$