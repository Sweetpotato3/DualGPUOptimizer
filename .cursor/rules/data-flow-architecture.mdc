---
description: Documents data flow between components for GPU resource management and optimization metrics in a dual-GPU system
globs: **/services/**,**/gui/**,**/dualgpuopt/**
alwaysApply: false
---


# data-flow-architecture

Primary Data Flows:

1. GPU Resource Metrics Flow (Importance: 95)
- GPU telemetry service collects real-time metrics (utilization, memory, temperature, power)
- Event bus distributes metrics to subscribers using priority-based routing (CRITICAL to LOW)
- Dashboard components maintain 60-sample rolling history for visualization
- Metrics flow through normalization pipeline for standardized presentation

2. Optimization Parameter Flow (Importance: 90)
- Layer balancing system distributes workload across GPUs based on:
  - Layer performance profiles (64 and 1024 token sequences)
  - Memory availability per GPU
  - Latency measurements
- Context size calculator sends configuration updates based on:
  - Layer count and dimensions  
  - Available GPU memory
  - Model precision settings

3. State Management Flow (Importance: 85)
- GPU configuration state flows from settings to command executor:
  - Overclocking parameters
  - Fan control settings  
  - Power limits
- Model deployment state flows between optimizer and launcher:
  - Tensor split ratios
  - Framework-specific configurations
  - Resource allocation mappings

4. Error and Recovery Flow (Importance: 80)
- Error service routes GPU-specific errors through severity-based handlers
- Fallback flow activates mock GPU mode on detection failures
- Recovery signals propagate through event system for state restoration

Key Integration Points:
- Telemetry service → Event bus → Dashboard components
- Optimizer → Command executor → GPU drivers
- State service → Configuration components → Model launcher
- Error service → Recovery handlers → State restoration

Relevant Files:
```
dual_gpu_optimizer/dualgpuopt/services/event_bus.py
dual_gpu_optimizer/dualgpuopt/services/state_service.py
dual_gpu_optimizer/dualgpuopt/telemetry.py
dual_gpu_optimizer/dualgpuopt/optimizer.py
dual_gpu_optimizer/dualgpuopt/gui/dashboard.py
```

$END$