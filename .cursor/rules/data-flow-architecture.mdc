---
description: Specification for data flow patterns and architecture in GPU optimization and monitoring systems
globs: dualgpuopt/**,integrated_app/**,hooks/**,custom_hooks/**,test_*.py
alwaysApply: false
---


# data-flow-architecture

The data flow architecture centers around GPU optimization with several key components:

## Memory Profiling Data Flow
File: `dualgpuopt/memory/profiler.py`
Importance: 95

Memory profiling system implements real-time data flow for GPU memory tracking:
- Session-based memory profiles with timeline tracking 
- Inference-specific memory patterns with token counts
- Two-tier detection pipeline:
  1. Spike Detection: Rapid memory growth analysis
  2. Leak Detection: Sustained growth monitoring
- Memory event classification with domain events:
  - ALLOCATION/DEALLOCATION
  - GROWTH_SPIKE 
  - LEAK_DETECTED
  - INFERENCE_START/END

## GUI Data Flow Pipeline 
Files: `dualgpuopt/gui/dashboard.py`, `dualgpuopt/gui/optimizer_tab.py`
Importance: 85

Dashboard implements real-time GPU metrics visualization with:
- Color-coded temperature thresholds (70°C, 80°C)
- Memory usage alerts (75%, 90%)
- Power consumption monitoring
- Clock speed tracking
- 60-second circular buffer history
- Timeline marker annotations

## GPU Telemetry Flow
File: `dualgpuopt/telemetry.py`
Importance: 90

Telemetry service implements:
- Real-time GPU metrics collection pipeline
- Custom middleware for metrics processing
- Middleware for event bus publishing
- Fallback to mock data on hardware errors
- Background thread for continuous collection
- Configurable collection intervals

## Memory Management Pipeline
File: `dualgpuopt/memory/monitor.py`
Importance: 92

Memory monitoring system with:
- Real-time memory usage tracking
- OOM prevention with recovery strategies
- Memory projection calculations
- Automatic memory cleanup triggers
- Profile-based usage estimation
- Safe context size calculations

## Event Bus Architecture
Files: `dualgpuopt/services/event_bus.py`, `dualgpuopt/services/event_bus_cpu.py`
Importance: 88

Event system manages data flow with:
- GPU metrics event publishing
- Model selection event propagation
- Split calculation event handling
- Resource allocation notifications
- Priority-based event dispatching
- CPU-bound event processing

## Resource Management Flow
File: `dualgpuopt/services/resource_manager.py`
Importance: 86

Resource allocation system:
- CPU/GPU task distribution
- Dynamic resource reallocation
- Component-specific defaults
- Thread pool management
- Resource type validation
- Global allocation tracking

## Smart Batching Pipeline
File: `dualgpuopt/batch/smart_batch.py`
Importance: 89

Batch processing system:
- Length-aware inference scheduling
- Back-pressure control mechanisms
- Automatic retry on OOM errors
- Bucket policy implementation
- Memory-based batch size calculation
- Token ratio optimization

$END$