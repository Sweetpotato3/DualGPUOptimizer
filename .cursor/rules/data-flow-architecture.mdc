---
description: Definition of data flows, component interactions, and information pathways for the dual GPU optimization system
globs: *.py,dualgpuopt/**/*.py
alwaysApply: false
---


# data-flow-architecture

Primary Data Flow Paths:

1. GPU Metrics Pipeline
- Source: GPU hardware via NVML/CUDA libraries 
- Flow: Hardware -> Telemetry Service -> Event Bus -> Dashboard/Visualization
- Key metrics:
  * Utilization rates
  * Memory usage
  * Temperature/Power data
  * Clock speeds
- Update frequencies:
  * Critical metrics: 500ms
  * Standard metrics: 1000ms
  * Background metrics: 2000ms

2. Optimization Parameter Flow
- Source: GPU Memory Analysis
- Flow: Optimizer -> Command Generator -> Runner Service -> GPU Hardware
- Parameters:
  * Tensor split ratios
  * Layer distribution configs
  * Memory allocation maps
  * Context size calculations

3. Configuration Data Flow
- Source: Settings Service
- Flow: Config Service -> State Manager -> GPU Commands -> Hardware
- Settings:
  * Overclock profiles
  * Fan curves
  * Power limits
  * Idle thresholds

4. Event Communication Architecture
- Central Event Bus with priority levels:
  * CRITICAL: GPU error conditions
  * HIGH: Resource allocation changes
  * NORMAL: Metric updates
  * LOW: Background tasks

Key Integration Points:

1. GPU Resource Management
File: dualgpuopt/services/state_service.py
- Manages bidirectional flow of GPU state data
- Coordinates resource allocation across components
- Importance Score: 95

2. Metrics Distribution System
File: dualgpuopt/telemetry.py
- Collects and distributes real-time GPU metrics
- Routes performance data to visualization components
- Importance Score: 85

3. Command Pipeline
File: dualgpuopt/commands/gpu_commands.py
- Handles GPU configuration command flow
- Manages parameter validation and execution
- Importance Score: 80

4. Event Communication
File: dualgpuopt/services/event_bus.py
- Routes system events between components
- Manages priority-based message distribution
- Importance Score: 75

$END$