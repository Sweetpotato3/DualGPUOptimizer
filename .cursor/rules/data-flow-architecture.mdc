---
description: Documents the data flow between components in GPU resource management and optimization systems.
globs: *.py,*/dualgpuopt/**
alwaysApply: false
---


# data-flow-architecture

Key data flows in the DualGPUOptimizer system:

## GPU Telemetry Flow
- Telemetry service collects raw GPU metrics (utilization, memory, temperature, power)
- Metrics are processed through middleware pipeline
- Data published to event bus for real-time monitoring
- Historical metrics stored in 60-second rolling buffer
- Alerts generated based on threshold violations
- File: `dualgpuopt/telemetry.py`

## Memory Profiling Flow 
- GPU memory events tracked across dual-GPU setup
- Events categorized as allocations, spikes, leaks
- Timeline data aggregated for analysis
- Session-based memory metrics calculated
- Leak detection flags sent to monitoring system
- File: `dualgpuopt/memory/profiler.py`

## Model Parameter Flow
- Model configurations loaded from presets
- Parameters validated against GPU capabilities
- Optimized splits calculated for dual GPUs
- Commands generated for framework execution
- Results dispatched to launcher
- File: `dualgpuopt/optimizer.py`

## Event Distribution Flow
- GPU metrics published via event bus
- Configuration changes propagate to components
- Status updates sent to UI subscribers
- Health check results trigger recovery actions
- File: `dualgpuopt/services/event_bus.py`

## Resource Management Flow
- GPU detection triggers telemetry initialization
- Memory thresholds control allocation limits 
- OOM events trigger recovery procedures
- Cache eviction managed by LRU policy
- Resource stats aggregated for monitoring
- File: `dualgpuopt/engine/pool/core.py`

Importance Scores:
- GPU Telemetry Flow: 95 (Critical metrics pipeline)
- Memory Profiling Flow: 90 (Core optimization data) 
- Model Parameter Flow: 85 (Key configuration flow)
- Event Distribution Flow: 80 (Integration backbone)
- Resource Management Flow: 85 (Resource coordination)

$END$