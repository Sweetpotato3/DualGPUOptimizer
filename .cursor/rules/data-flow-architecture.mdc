---
description: Documents data flows between system components including GPU telemetry, optimization parameters, and monitoring metrics
globs: 'dual_gpu_optimizer/dualgpuopt/*.py'
alwaysApply: false
---


# data-flow-architecture

### Primary Data Flows

1. GPU Telemetry Collection Flow (Importance: 95)
- `gpu_info.py` collects raw GPU data via NVML
- Data streams to `telemetry.py` for real-time polling and metrics aggregation
- Metrics flow to `optimizer.py` for workload distribution calculations
- Flow includes: utilization, memory, PCIe throughput, temperature, power, clocks

2. Optimization Parameter Flow (Importance: 90)
- `optimizer.py` receives GPU capabilities from `gpu_info.py`
- Calculates tensor fractions and memory splits
- Generates environment configurations 
- Outputs command-line arguments for ML frameworks
- Parameters flow to execution environment via env files

3. Monitoring Metrics Flow (Importance: 85)
- `telemetry.py` streams metrics via queue system
- `tray.py` receives utilization data for idle detection
- Notification triggers based on 30% utilization threshold
- Metrics logged for historical analysis

4. Configuration Data Flow (Importance: 80)
- `configio.py` manages configuration parameter distribution
- Settings flow to optimization components
- Parameters include GPU splits, tensor parallel sizes
- Configuration validated against GPU capabilities

### Key Integration Points

1. GPU Data Collection Interface (Importance: 85)
- `gpu_info.py` -> `telemetry.py`
- Real GPU or mock data generation
- Structured GPU objects with standardized metrics

2. Optimization Parameter Distribution (Importance: 80)
- `optimizer.py` -> Framework command generation
- Memory split calculations
- Tensor fraction distribution
- Environment variable generation

3. Monitoring Interface (Importance: 75)
- `telemetry.py` -> `tray.py`
- Queue-based metric streaming
- Threshold-based notifications
- System tray integration

$END$