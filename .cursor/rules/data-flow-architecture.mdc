---
description: Data flow documentation for GPU optimization, inference, and monitoring metrics across components
globs: *.py,dualgpuopt/**/*.py,dual_gpu_optimizer/**/*.py
alwaysApply: false
---


# data-flow-architecture

Primary Data Flow Structures:

1. GPU Telemetry Pipeline
- Memory Profiler (`dualgpuopt/memory/profiler.py`) collects and analyzes GPU memory patterns
- Real-time metrics flow through EventBus to Dashboard (`dualgpuopt/gui/dashboard.py`)
- Memory leak detection alerts propagate via event system
- Telemetry Service (`dualgpuopt/telemetry.py`) publishes GPU health metrics:
  * Temperature
  * Memory usage
  * Power consumption 
  * Fan speeds
  * Clock speeds

2. Optimization Data Flow
- Layer Balancing System (`dualgpuopt/layer_balance.py`) provides tensor distribution data
- Model Parameter Calculator generates memory requirements and context sizes
- Split ratios flow to Command Generator for framework-specific execution
- Results propagate back through event system for UI updates

3. Memory Management Flow
- Memory Predictor (`dualgpuopt/memory/predictor.py`) estimates requirements 
- Smart Batch system (`dualgpuopt/batch/smart_batch.py`) manages token distribution
- Recovery system handles OOM events with tiered strategies
- Memory metrics flow through EventBus to monitoring components

4. Configuration Data Flow
- State Service (`dualgpuopt/services/state_service.py`) maintains centralized state
- Config changes propagate via event system to dependent components
- Theme settings flow through dedicated theme observer pattern
- Settings persistence handled by Config Service with event notifications

5. Model Execution Pipeline
- Model configurations flow from UI to Launcher system
- Command Generator produces optimized execution parameters
- Runner manages subprocess execution and log streaming
- Output flows back through event system to UI components

Critical Data Flow Paths:

1. GPU Metrics Collection → Event Bus → Dashboard Display
2. Memory Alerts → Event Bus → UI Notifications
3. Model Parameters → Split Calculator → Command Generator
4. Configuration Changes → State Service → Component Updates
5. Memory Usage → Predictor → Batch Size Optimization

File Paths:
- `dualgpuopt/memory/profiler.py`
- `dualgpuopt/telemetry.py` 
- `dualgpuopt/layer_balance.py`
- `dualgpuopt/memory/predictor.py`
- `dualgpuopt/batch/smart_batch.py`
- `dualgpuopt/services/state_service.py`
- `dualgpuopt/services/event_bus.py`
- `dualgpuopt/gui/dashboard.py`

$END$