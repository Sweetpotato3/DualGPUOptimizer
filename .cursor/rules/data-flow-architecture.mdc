---
description: Specifies the data flow patterns and architectures for GPU resource monitoring, optimization parameters, and model deployment metrics.
globs: **/telemetry.py,**/metrics.py,**/optimizer.py,**/services/*.py,**/events.py
alwaysApply: false
---


# data-flow-architecture

## Telemetry Data Flow
The system implements a multi-layer telemetry data flow architecture:

1. GPU Metrics Collection Layer
- Raw metrics gathered from NVML with 60-second rolling history
- Metrics include: utilization, memory, temperature, power, PCIe bandwidth
- Built-in error recovery with exponential backoff
- Automatic failover to mock data after consecutive failures

2. Event Processing Pipeline
- Metrics processed through specialized event bus system
- Priority-based event handling (CRITICAL > HIGH > NORMAL > LOW)
- GPU-specific event hierarchy for metrics distribution
- Event propagation patterns for model selection and configuration changes

3. Memory Profile Data Flow  
- Session-based memory timeline tracking
- Per-GPU memory events (allocation, deallocation, spikes, leaks)
- Memory pattern analysis using sliding windows
- Token-based memory analysis for LLM inference

4. Optimization Parameter Flow
- Model split parameters calculated and distributed to GPU controllers
- Layer distribution algorithms pass data through event system
- Dynamic batch size adjustments propagated through optimization events
- Resource allocation parameters synchronized across GPUs

5. Monitoring Metrics Distribution
- Real-time GPU metrics published to subscribers through event bus
- Aggregate cross-GPU metrics calculated and distributed
- Alert level classification data propagated to UI components
- Historical metrics maintained in rolling buffers

Key File Paths:
```
dualgpuopt/telemetry.py
dualgpuopt/metrics.py 
dualgpuopt/services/event_bus.py
dualgpuopt/services/event_service.py
dualgpuopt/memory/profiler.py
```

The architecture emphasizes real-time monitoring data flow while maintaining service continuity through hardware/driver failures. The event-driven design enables flexible metrics distribution and optimization parameter propagation across the system.

$END$