---
description: Specification for analyzing data flow architecture in dual GPU optimization systems with focus on memory management and telemetry
globs: **/*.py,**/dual_gpu_optimizer/**
alwaysApply: false
---


# data-flow-architecture

The data flow architecture centers around three primary domains:

## GPU Metrics Flow (Importance: 95)
- Telemetry service collects raw GPU metrics (utilization, memory, temperature, power)
- Metrics flow through event bus system with priority-based routing
- Dashboard components receive metrics via observer pattern
- Real-time visualization components update based on metric events
- Key paths: dualgpuopt/telemetry.py → services/event_bus.py → gui/dashboard.py

## Model Optimization Flow (Importance: 90)
- Layer balancer determines optimal layer distribution across GPUs 
- Memory predictor calculates requirements and constraints
- Layer assignments flow to model launcher for execution
- GPU split configurations generated and applied
- Key paths: dualgpuopt/layer_balance.py → memory/predictor.py → optimizer.py

## Memory Management Flow (Importance: 85)
- Memory monitor tracks GPU VRAM usage and allocation
- OOM detection triggers recovery workflow
- Recovery actions flow through error handler to affected components
- Memory reclamation results feed back to monitoring system
- Key paths: dualgpuopt/memory/monitor.py → error_handler/recovery.py → memory/metrics.py

## Resource Control Flow (Importance: 80)
- GPU commands flow through command system with rollback capability
- Parameter changes trigger validation and safety checks
- Configuration updates propagate through state service
- Settings persistence ensures state consistency
- Key paths: dualgpuopt/commands/gpu_commands.py → services/state_service.py

## Alert Flow (Importance: 75)
- GPU metrics exceed thresholds trigger alert generation
- Alerts flow through event system to UI components
- Alert status tracked in state service
- Recovery recommendations generated based on alert type
- Key paths: dualgpuopt/error_handler/base.py → services/event_bus.py

The architecture emphasizes real-time monitoring and optimization of dual GPU configurations, with specific focus on memory management and performance optimization for machine learning workloads.

$END$