---
description: Specifications for data flow and communication patterns between GPU optimization components
globs: **/dualgpuopt/**/*.py,**/integrated_app/**/*.py
alwaysApply: false
---


# data-flow-architecture

The data flow architecture centers around GPU optimization, telemetry collection, and resource distribution across dual GPU systems.

## Core Data Flow Components

### Telemetry Pipeline
- GPU metrics flow from NVML through `telemetry.py` to event subscribers
- Metrics include memory usage, utilization, temperature, power draw
- Middleware processes telemetry before dispatching to visualization components
- Data flows through EventBus using typed events for type safety

### Optimization Data Flow
- GPU memory split calculations flow from `optimizer.py` to command generators
- Tensor fraction data moves from detection to distribution algorithms
- Layer balancing data flows from profiling to device mapping 
- Command strings flow to launcher components for execution

### State Management Flow
- Configuration changes flow through StateService to subscribed components
- GPU settings flow from UI through command system to NVML
- Errors flow through ErrorService to logging and UI components
- Events flow through EventBus with priority-based routing

### Resource Management Flow 
- GPU resource data flows from probing to optimization algorithms
- Context size data flows from calculation to command generation
- Memory policy data flows from configuration to runtime execution
- Layer distribution data flows from balancing to execution

## Key Data Flow Paths

```
NVML -> Telemetry -> EventBus -> Dashboard
Config -> StateService -> Optimizer -> Commands
GPU Info -> LayerBalance -> DeviceMap -> Execution
Metrics -> TelemetryMiddleware -> Visualization
```

## Critical Data Exchange Points

1. GPU Detection to Optimization
- File: `dualgpuopt/gpu_info.py` -> `dualgpuopt/optimizer.py`
- Detected GPU capabilities flow to optimization algorithms
- Memory allocation data flows to split calculations

2. Telemetry to Visualization 
- File: `dualgpuopt/telemetry.py` -> `dualgpuopt/gui/dashboard.py`
- Real-time metrics flow through event system
- Historical data maintained for trending

3. Configuration to Execution
- File: `dualgpuopt/configio.py` -> `dualgpuopt/runner.py`  
- Settings flow through state management
- Commands generated based on configuration

4. Layer Balance to Distribution
- File: `dualgpuopt/layer_balance.py` -> `dualgpuopt/optimizer.py`
- Layer profiling data flows to distribution algorithms
- Device mapping optimized based on layer characteristics

$END$