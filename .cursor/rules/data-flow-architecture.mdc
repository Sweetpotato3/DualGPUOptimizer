---
description: Analyzes data flow patterns between components for GPU resource optimization and monitoring
globs: **/services/*.py,**/gui/*.py,**/dualgpuopt/*.py
alwaysApply: false
---


# data-flow-architecture

Key data flows in the DualGPUOptimizer system:

### Core Event Bus Data Flow (Importance: 95)
- Event bus handles typed events with priority-based dispatch
- Critical data paths:
  1. GPU telemetry data → Event bus → Dashboard components
  2. Configuration changes → Event bus → Service components
  3. Error events → Error service → UI notifications
- File: `services/event_bus.py`

### GPU Telemetry Pipeline (Importance: 90)
- Telemetry collection generates metrics data:
  - Memory usage, utilization, temperature, power
  - PCIe bandwidth metrics
  - Clock speeds and fan data
- Data flows through middleware pipeline:
  1. Raw GPU metrics → Telemetry middleware → Event bus
  2. Event bus → Dashboard visualizations
- Files: `telemetry.py`, `gui/dashboard.py`

### Configuration Data Flow (Importance: 85)
- Config service manages bidirectional data flow:
  1. Default configs → Load/validation → Active settings
  2. User changes → Config validation → Storage
  3. Config updates → Event notifications → UI components
- File: `services/config_service.py`

### State Management Flow (Importance: 80)
- Centralized state service handles:
  1. GPU state changes → State updates → UI components
  2. User actions → Command execution → State mutations
  3. State changes → Event propagation → Dependent components
- File: `services/state_service.py`

### Optimization Data Flow (Importance: 85)
1. GPU Discovery:
   - NVML detection → GPU capabilities → Memory splits
2. Model Configuration:
   - Model parameters → Context size calculation → GPU assignment
3. Command Generation:
   - GPU splits + Model config → Framework commands
- Files: `optimizer.py`, `gpu_info.py`

### Batch Processing Pipeline (Importance: 75)
- Smart batching data flow:
  1. Inference requests → Length-based bucketing
  2. Batched requests → GPU assignment
  3. Execution results → Response aggregation
- File: `batch/smart_batch.py`

$END$