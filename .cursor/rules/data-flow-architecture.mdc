---
description: Guidelines for data flow and component interactions in the DualGPUOptimizer system
globs: dual_gpu_optimizer/dualgpuopt/*.py
alwaysApply: false
---


# data-flow-architecture

## Core Data Flows

### GPU Resource Information Flow
- GPU detection via NVML produces device data (gpu_info.py)
- Data flows to optimizer module for split calculations
- Telemetry module consumes GPU data for real-time monitoring
- GUI receives GPU data for visualization and alerts

### Configuration Data Flow
- configio.py manages persistent settings storage
- Settings flow to GUI for display/modification
- Optimizer receives config parameters for command generation
- Runner module consumes configuration for process execution

### Monitoring Data Pipeline
- Telemetry stream initiates from telemetry.py
- Real-time GPU metrics flow to GUI for chart updates
- System tray receives utilization data for idle detection
- Logging system captures operational metrics

### Command Generation Pipeline
- Model parameters flow from GUI to optimizer
- Optimizer generates framework-specific commands
- Commands flow to runner for execution
- Execution output flows back to GUI log display

## Key Integration Points
Importance Score: 85
- GPU Info → Optimizer: Resource allocation decisions
- Optimizer → Runner: Command execution flow
- Telemetry → GUI: Real-time monitoring updates
- Config → All Components: System-wide settings distribution

## Data Models
Importance Score: 90
- GPU Resource Model: Memory, utilization, device capabilities
- Optimization Parameters: Split configurations, tensor fractions
- Monitoring Metrics: Load, memory usage, PCIe throughput
- Framework Commands: llama.cpp and vLLM specific parameters

$END$