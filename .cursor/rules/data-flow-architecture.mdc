---
description: Documents the data flow and component interactions for GPU optimization and monitoring
globs: **/gpu_info.py,**/configio.py,**/optimizer.py,**/telemetry.py,**/tray.py
alwaysApply: false
---


# data-flow-architecture

### Core Data Flows (Importance: 95)
- GPU resource data flows from NVML through `gpu_info.py` to monitoring components
- Optimization parameters flow from `configio.py` to optimizer module
- Telemetry metrics flow from GPU hardware through `telemetry.py` to monitoring system

### Component Interactions (Importance: 90)
1. GPU Information Flow
   - NVML → `gpu_info.py` → Configuration validation
   - GPU detection results → Mock data generator (fallback)
   - Memory usage metrics → Optimization calculator

2. Configuration Flow
   - User settings → `configio.py` → Validation layer
   - Validated config → GPU optimizer
   - Theme selections → UI components

3. Telemetry Pipeline
   - GPU metrics → `telemetry.py` collection
   - Metrics queue → Idle detection system
   - Alert thresholds → Notification system

### Optimization Data Flow (Importance: 85)
1. Command Generation Pipeline
   - GPU split calculations → Command string generation
   - Model parameters → Environment file generator
   - GPU memory totals → Tensor fraction calculator

2. Resource Monitoring
   - Telemetry stream → Idle detection watcher
   - Usage patterns → Resource release suggestions
   - PCIe metrics → Performance monitoring

### Integration Points (Importance: 80)
- GPU split strings integrate with `llama.cpp` and `vLLM` commands
- Environment variables connect with CUDA and NCCL systems
- Telemetry data feeds into notification system
- Configuration values flow to command generators

$END$