---
description: Defines data flow architecture between GPU resource management, model optimization, and monitoring components
globs: dual_gpu_optimizer/dualgpuopt/*.py
alwaysApply: false
---


# data-flow-architecture

Primary Data Flow Paths:

1. GPU Resource Data Flow (Importance: 95)
- Telemetry system streams GPU metrics to monitoring components
- NVML interface captures real-time GPU utilization and memory data
- Historical GPU load data maintained in 2-minute rolling window
- GPU memory override settings flow through environment variables
- File: dual_gpu_optimizer/dualgpuopt/telemetry.py

2. Model Optimization Parameters (Importance: 90)
- Tensor fraction calculations distributed across GPU components
- Memory split configurations flow to deployment frameworks
- Model preset configurations propagate to deployment systems
- Context size settings distributed to execution components
- Files: 
  - dual_gpu_optimizer/dualgpuopt/optimizer.py
  - dual_gpu_optimizer/dualgpuopt/gpu_info.py

3. Monitoring Metrics Flow (Importance: 85)
- Real-time GPU utilization data streams to visualization components
- Alert thresholds propagate through monitoring system
- PCIe bandwidth metrics flow to optimization components
- Idle detection data flows to notification system
- Files:
  - dual_gpu_optimizer/dualgpuopt/telemetry.py
  - dual_gpu_optimizer/dualgpuopt/tray.py

4. Configuration Data Flow (Importance: 75)
- Alert threshold parameters flow to monitoring system
- GPU memory ratios propagate to tensor parallelism calculator
- Framework-specific parameters flow to command generators
- Model selection history preserved between sessions
- File: dual_gpu_optimizer/dualgpuopt/configio.py

Key Data Integration Points:
- GPU telemetry stream connects to visualization and alert systems
- Memory optimization parameters flow to deployment command generators
- Configuration settings propagate through environment variable system
- Alert thresholds integrate with monitoring and notification components

$END$