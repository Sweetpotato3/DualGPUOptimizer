---
description: Defines data flow and message passing between system components for GPU optimization functions
globs: dualgpuopt/**/*.py,dual_gpu_optimizer/**/*.py
alwaysApply: false
---


# data-flow-architecture 

The data flow architecture centers around GPU resource data, model configuration parameters, and performance metrics:

## Core Data Flows

1. GPU Telemetry Pipeline
- `dualgpuopt/telemetry.py` collects GPU metrics (utilization, memory, temperature)
- Data flows to `dualgpuopt/gui/dashboard.py` for visualization
- `GPUMetricsEvent` published through event bus for real-time updates
- Metrics cached in `MemoryMonitor` for OOM prevention

2. Optimization Parameter Flow  
- `dualgpuopt/optimizer.py` calculates GPU split ratios and tensor parallel configurations
- Parameters flow to `dualgpuopt/launcher.py` for model execution
- Model configuration validated through `ModelValidator`
- Results published as optimization events

3. Memory Management Pipeline
- `dualgpuopt/memory/monitor.py` tracks GPU memory usage
- Alerts flow through `MemoryAlertCallback` when thresholds exceeded
- Recovery actions triggered through `RecoveryManager`
- Usage history maintained for prediction

4. State Management Flow
- `dualgpuopt/services/state_service.py` maintains centralized application state
- State changes published as events through event bus
- UI components subscribe to relevant state updates
- Configuration persisted to disk through state service

5. Error Handling Pipeline 
- `dualgpuopt/error_handler` collects error telemetry
- Errors categorized and severity determined
- Recovery strategies selected and executed
- Results published through error events

## Key Integration Points

1. Event Bus Hub (`dualgpuopt/services/event_bus.py`)
- Central message broker for system events
- Handles GPU metrics, optimization results, errors
- Provides typed events with priority dispatch
- Enables decoupled communication between components

2. State Service (`dualgpuopt/services/state_service.py`) 
- Manages application configuration state
- Handles persistence of settings
- Publishes state change events
- Provides subscription interface for state updates

3. Memory Monitor (`dualgpuopt/memory/monitor.py`)
- Tracks GPU memory usage across components
- Issues alerts on memory pressure
- Triggers recovery actions
- Maintains usage history for predictions

The data flow architecture focuses on efficient distribution of GPU resource data, optimization parameters, and monitoring metrics while maintaining decoupled components through event-based communication.

$END$