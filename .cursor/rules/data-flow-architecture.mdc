---
description: Use when analyzing or documenting data flows between components in GPU optimization and monitoring systems
globs: **/*.py
alwaysApply: false
---


# data-flow-architecture

The system implements a multi-layered data flow architecture for GPU optimization and monitoring:

1. Core Event Bus Data Flow (event_bus.py, event_service.py)
- GPUMetricsEvent stream carries real-time metrics:
  - Utilization percentages
  - Memory usage stats
  - Temperature readings
  - Power consumption data
  - Fan speeds
- OptimizationEvent stream manages:
  - Tensor split configurations
  - Layer distribution updates
  - Model path changes

2. Telemetry Pipeline (telemetry.py)
- GPU metrics collection flow:
  - Raw metrics gathering from NVML
  - Processing through middleware pipeline
  - Distribution to event bus subscribers
- Metrics update frequency:
  - Primary metrics: 1-second intervals
  - Tray monitoring: 5-second intervals

3. State Management Flow (state_service.py)
- Bidirectional state updates for:
  - GPU overclock settings
  - Model configurations
  - Context size parameters
- State change propagation through:
  - Direct service calls
  - Event bus notifications
  - Configuration updates

4. Optimization Data Flow (optimizer.py, layer_balance.py)
- Layer distribution calculations:
  - Performance metrics input
  - Workload analysis
  - Distribution output
- Memory split optimization:
  - GPU capacity inputs
  - Tensor fraction calculations
  - Framework-specific outputs

Key Data Flow Paths:
```
Metrics Collection -> Event Bus -> Dashboard Display
State Changes -> Event Bus -> Service Updates
Optimization Calculations -> Command Generation -> Runner Execution
```

Relevant Components:
- dualgpuopt/services/event_bus.py
- dualgpuopt/services/state_service.py
- dualgpuopt/telemetry.py
- dualgpuopt/optimizer.py

$END$