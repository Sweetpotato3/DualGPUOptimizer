---
description: Documents data flow between components including GPU resource data, optimization parameters and monitoring metrics
globs: dualgpuopt/**/*.py,dual_gpu_optimizer/**/*.py,integrated_app/**/*.py
alwaysApply: false
---


# data-flow-architecture 

## Core Data Flow Components

### GPU Telemetry Pipeline
File: dualgpuopt/telemetry.py
- Real-time GPU metrics collection via NVML
- Metrics include utilization, memory usage, temperature, power draw
- Publishing metrics to event bus for consumption by UI components  
- Fallback to mock telemetry data when hardware access unavailable

### State Management Service 
File: dualgpuopt/services/state_service.py
- Centralized state store for GPU configurations and model parameters
- Event-driven updates with selective notification to subscribers
- Persists state to disk for configuration continuity
- Maintains GPU allocation ratios and optimization parameters

### Model Parameter Flow
File: dualgpuopt/gui/launcher.py
- Extracts model architecture details from filenames 
- Calculates optimal context sizes based on GPU resources
- Propagates tensor split configurations to runner components
- Manages framework-specific launch parameters

### Memory Monitor Pipeline
File: dualgpuopt/memory_monitor.py
- Tracks model-specific memory consumption patterns
- Projects future memory needs using historical data
- Implements four-level alert system for memory pressure
- Triggers automatic recovery strategies when thresholds exceeded

### Optimization Data Flow
File: dualgpuopt/optimizer.py
- Calculates GPU split ratios based on available VRAM
- Generates framework-specific optimization commands
- Propagates tensor parallel configurations
- Manages memory quota distribution between GPUs

### Layer Balance Pipeline
File: dualgpuopt/layer_balance.py
- Profiles layer performance across GPUs
- Calculates weighted ratios for layer assignment
- Dynamically rebalances layers based on runtime metrics
- Optimizes for contiguous layer blocks per GPU

### Dashboard Data Pipeline
File: dualgpuopt/gui/dashboard.py
- Subscribes to real-time GPU telemetry
- Processes metrics for visualization
- Maintains rolling window of performance history
- Correlates cross-GPU performance metrics

Key integration points:
- Event bus enables decoupled metric flow between components
- State service provides centralized configuration distribution
- Memory monitor feeds optimization decisions
- Telemetry pipeline drives visualization updates

$END$