---
description: Specification for analyzing and documenting data flow patterns between GPU optimization components
globs: **/*.py,**/dualgpuopt/**
alwaysApply: false
---


# data-flow-architecture

Core Data Flow Components:

1. GPU Metrics Pipeline
- Source: dualgpuopt/telemetry.py
- Collects real-time GPU performance data:
  - Utilization, memory, temperature, power metrics
  - PCIe bandwidth monitoring
  - Clock speeds (core/memory)
- Distributes metrics through event bus to visualization components
- Powers real-time dashboard updates via 60-sample rolling window

2. Optimization Parameter Flow
- Source: dualgpuopt/optimizer.py
- Calculates and distributes:
  - Memory split ratios between GPUs
  - Tensor parallelism fractions
  - Context size limits
- Feeds configuration to framework-specific runners (llama.cpp/vLLM)

3. GPU Command Pipeline
- Source: dualgpuopt/commands/gpu_commands.py
- Manages overclocking parameter flow:
  - Core/memory clock offsets
  - Power limits
  - Fan speed curves
- Implements reversible command pattern with state restoration

4. Event Distribution System
- Source: dualgpuopt/services/event_bus.py
- Handles priority-based metric propagation:
  - CRITICAL: Hardware safety events
  - HIGH: Optimization adjustments
  - NORMAL: Monitoring updates
- Routes GPU telemetry to visualization components

5. Batch Processing Flow
- Source: dualgpuopt/batch/smart_batch.py
- Manages inference workload distribution:
  - Length-aware sequence batching
  - Back-pressure mechanisms
  - Memory-based batch size calculations
- Feeds into GPU resource allocation system

The architecture implements a multi-layered data flow optimized for dual-GPU setups, with emphasis on real-time metric collection, workload distribution, and hardware safety monitoring.

$END$