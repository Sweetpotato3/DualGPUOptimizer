---
description: Specification for data flow between GPU resource monitoring, optimization, and telemetry components.
globs: **/dualgpuopt/**/*.py,**/services/**/*.py,**/gui/**/*.py
alwaysApply: false
---


# data-flow-architecture

The system implements a multi-layered data flow architecture for GPU resource optimization:

## Core Data Flow Components

1. GPU Resource Telemetry Pipeline
```
GPU Hardware/Mock Data 
  -> Telemetry Service
    -> Event Bus 
      -> Dashboard/Monitoring UI
```

- Telemetry Service collects GPU metrics (utilization, memory, temperature)
- Event Bus publishes GPUMetricsEvent with standardized metric format
- Dashboard subscribes to events for real-time visualization

Key file: `dualgpuopt/telemetry.py`

2. Model Optimization Flow
```
Model Parameters 
  -> Optimizer Service
    -> Layer Balance Calculator
      -> GPU Split Configuration
```

- Optimizer analyzes model architecture and parameters
- Layer Balance Calculator determines optimal layer distribution
- Split Configuration generates commands for model deployment

Key file: `dualgpuopt/optimizer.py`

3. Memory Management Pipeline
```
Memory Monitor
  -> Predictor Service  
    -> Recovery Service
      -> Alert System
```

- Monitor tracks real-time GPU memory usage
- Predictor estimates memory requirements and growth
- Recovery Service implements OOM prevention strategies

Key files:
- `dualgpuopt/memory/monitor.py`
- `dualgpuopt/memory/predictor.py`
- `dualgpuopt/memory/recovery.py`

4. Event-Driven State Management
```
State Service
  -> Event Bus
    -> UI Components
      -> Config Service
```

- State Service maintains application configuration
- Event Bus propagates state changes
- Config Service persists settings to disk

Key file: `dualgpuopt/services/state_service.py`

5. Error Handling Flow
```
Error Handler
  -> Error Categories
    -> Recovery Strategies
      -> UI Alerts
```

- Categorizes GPU-specific errors (driver, memory, process)
- Implements recovery strategies per error type
- Displays user-friendly error messages

Key file: `dualgpuopt/error_handler/handler.py`

The architecture emphasizes event-driven communication between components, with clear separation of GPU resource monitoring, optimization calculation, and user interface updates. Error handling and recovery strategies are integrated throughout the data flow to ensure system reliability.

$END$