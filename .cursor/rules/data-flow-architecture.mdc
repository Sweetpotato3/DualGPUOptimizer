---
description: Defines data flow patterns and component interactions for GPU optimization and monitoring in a dual-GPU system
globs: **/dualgpuopt/**/*,**/dual_gpu_optimizer/**/*,**/*.py
alwaysApply: false
---


# data-flow-architecture

Core Data Flow Components:

1. GPU Telemetry Pipeline
- Data Source: GPU hardware metrics via NVML interface
- Flow: Hardware Metrics -> Telemetry Service -> Event Bus -> Dashboard
- Key metrics tracked:
  * GPU utilization percentages
  * Memory usage (MiB)
  * Temperature (Â°C)
  * Power consumption (W)
- Event-driven middleware transforms raw telemetry into structured metrics

2. Model Configuration Flow
```
Model Parameters -> Optimizer -> Launch Configuration -> Command Generation
```
- Input: Model architecture parameters (layers, heads, context size)
- Processing: Memory requirement calculations, split ratio optimization
- Output: Framework-specific launch commands (llama.cpp/vLLM)

3. Memory Management Pipeline
```
Memory Predictor -> Recovery Service -> Resource Monitor
```
- Predictive memory analysis based on model profiles
- Recovery strategy selection and execution
- Resource monitoring feedback loop
- OOM prevention through proactive scaling

4. GPU Split Optimization Flow
```
Layer Profiler -> Balance Calculator -> Distribution Optimizer
```
- Layer performance profiling with dual sequence lengths
- Weighted performance ratio calculations
- Block optimization for contiguous layer placement
- Cross-GPU communication optimization

Key Integration Points:

1. Event Bus Architecture
- Central event distribution system
- Priority-based message routing
- GPU-specific event types
- Real-time metric propagation

2. Configuration Service Integration
```
User Settings -> Config Service -> State Manager -> Components
```
- Persistent GPU profiles
- Runtime configuration updates
- State synchronization across components

3. Recovery Pipeline
```
Memory Monitor -> Recovery Service -> Resource Manager
```
- Progressive recovery strategies
- Resource reallocation
- State restoration handling

Critical Data Paths:
- `/dualgpuopt/telemetry.py`: GPU metrics collection and distribution
- `/dualgpuopt/memory/predictor.py`: Memory usage prediction
- `/dualgpuopt/layer_balance.py`: Layer distribution optimization
- `/dualgpuopt/services/event_bus.py`: Event routing system

$END$