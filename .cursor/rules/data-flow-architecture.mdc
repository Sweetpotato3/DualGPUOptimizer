---
description: Specification for analyzing data flow and component interactions in GPU optimization systems and ML model deployments
globs: *.py,dual_gpu_optimizer/**/*,integrated_app/**/*
alwaysApply: false
---


# data-flow-architecture

Primary Data Flow Components:

1. GPU Metrics Collection Pipeline
- `dualgpuopt/telemetry.py` implements core metrics collection:
  * Usage, memory, temperature, power metrics flow from NVML
  * PCIe bandwidth and clock speeds collected at configured intervals
  * Metrics dispatched through event bus to visualization components
  * Mock data generation for testing/development scenarios

2. Model Parameter Flow
- `dualgpuopt/ctx_size.py` and `dualgpuopt/layer_balance.py` handle model configuration:
  * Model architecture parameters (layers, heads, dimensions) flow into context size calculator
  * Memory requirements flow to layer balancing system
  * Optimization parameters flow to command generators
  * Framework-specific configurations generated for deployment

3. GPU Resource Management Flow
- `dualgpuopt/optimizer.py` coordinates resource allocation:
  * Memory availability flows from GPU info service
  * Split ratios calculated based on relative GPU capabilities 
  * Tensor parallel configurations flow to framework adapters
  * Launch parameters flow to command generators

4. Event Propagation System
- `dualgpuopt/services/event_bus.py` manages metric distribution:
  * GPU events flow through prioritized channels
  * Telemetry updates propagate to visualization components
  * Error events trigger recovery workflows
  * State changes notify optimization components

Key Data Flow Paths:

```
GPU Hardware -> Telemetry -> Event Bus -> Dashboard
Model Config -> Context Calculator -> Layer Balancer -> Command Generator
GPU Resources -> Optimizer -> Framework Adapter -> Launch System
```

The architecture emphasizes real-time metric flow for GPU optimization while maintaining separate paths for model configuration and resource management.

$END$