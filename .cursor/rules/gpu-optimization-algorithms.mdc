---
description: Documentation focused on GPU memory allocation, tensor parallelism, and optimization algorithms used in the dual-GPU optimization system
globs: **/optimizer.py,**/gpu_info.py,**/memory/*.py,**/gpu/info.py
alwaysApply: false
---


# gpu-optimization-algorithms

## Memory Distribution Algorithm
Implements algorithmic decision making for distributing model layers and memory across dual GPUs:

```python
memory_split = calculate_memory_split(total_memory, gpu_info)
# Returns optimal split ratio based on relative GPU memory sizes
# Example: Returns [0.6, 0.4] for 60/40 split between GPUs
```

Key business rules:
- Reserves 2GB safety buffer per GPU for system operations
- Allocates proportionally to available VRAM 
- Maintains minimum 10% allocation per GPU
- Dynamically adjusts for model architecture requirements

## Tensor Parallel Split Calculation
Determines optimal tensor parallelism configuration:

```python
tp_size = calculate_tensor_parallel(model_size, available_gpus)
# Returns recommended tensor parallel size
# Considers model architecture and memory requirements
```

Business rules:
- Evaluates model parameter count vs available GPU memory
- Recommends tensor parallelism when model exceeds 80% of min GPU memory
- Maintains optimal communication overhead vs parallelism tradeoff
- Factors KV cache sizing into memory calculations

## Token Memory Allocation 
Calculates per-token memory requirements:
```python
bytes_per_token = hidden_size * num_layers * 2  # For float16
total_memory = bytes_per_token * seq_length
```

Memory Constraints:
- KV cache overhead factored at 2x for attention calculations
- System memory reserve of 2GB per GPU
- Tensor parallelism overhead multiplier based on TP size
- Dynamic batch size adjustment based on available memory

## Memory Profile Analysis
Implements memory usage pattern detection:
- Growth patterns using linear regression 
- Leak detection with configurable thresholds
- Fragmentation analysis through peak-valley ratios
- Spike detection using statistical analysis

## Relevant Files
- optimizer.py: Core optimization algorithms
- gpu_info.py: Hardware capability detection
- memory/profiler.py: Memory pattern analysis
- gpu/info.py: GPU resource management

$END$