---
description: Documentation of GPU memory distribution algorithms, tensor parallel splits calculation, and memory allocation strategies
globs: **/*.py,**/gpu/*.py,**/optimizer/*.py,**/memory/*.py
alwaysApply: false
---


# gpu-optimization-algorithms

## Memory Split Calculation

Core algorithm for distributing model layers across multiple GPUs based on available VRAM:

1. Memory Allocation Strategy:
```python
# Calculates per-token memory requirements
bytes_per_token = model.kv_hidden_size * model.num_layers * 2
memory_overhead = 0.2  # 20% overhead for tensor operations
split_ratio = gpu1_vram / (gpu1_vram + gpu2_vram)
```

2. GPU Layer Distribution:
- Balances layers across GPUs based on relative memory capacity
- Handles dynamic KV cache allocation with attention-based memory requirements
- Implements fallback mechanisms for OOM conditions

3. Tensor Parallel Split Optimization:
- Splits large language models into tensor parallel shards
- Optimizes communication patterns between GPUs
- Handles model-specific requirements (MQA/GQA, Mixtral MoE)

## Memory Profiling System

Key components for memory tracking and optimization:

1. Profile Collection:
- Track memory patterns across multiple GPUs
- Monitor allocation/deallocation events
- Detect memory growth spikes and leaks
- Associate memory usage with inference sessions

2. Memory Leak Detection:
- Uses sliding window analysis 
- Calculates memory growth rates
- Two-tier threshold system:
  - Spike threshold for rapid growth
  - Leak threshold for sustained growth

3. Session Analysis:
- Track inference memory baselines
- Calculate per-GPU deltas
- Monitor token count impact
- Pattern analysis for memory anomalies

## Optimization Algorithms 

1. Context Length Calculator:
- Determines maximum safe context size based on:
  - Available GPU memory
  - Model architecture parameters
  - Tensor parallel configuration
  - KV cache requirements

2. Layer Balancing:
- Distributes model layers for optimal latency
- Considers memory quotas per GPU
- Handles contiguous layer blocks
- Special handling for embedding layers

Relevant file paths:
```
dualgpuopt/optimizer.py
dualgpuopt/memory/profiler.py
dualgpuopt/gpu_info.py
dualgpuopt/layer_balance.py
```

$END$