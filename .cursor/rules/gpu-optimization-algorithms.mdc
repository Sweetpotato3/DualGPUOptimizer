---
description: Documentation of GPU memory management, tensor parallelism, and memory allocation algorithms for dual-GPU optimization
globs: **/optimizer.py,**/gpu_info.py,**/memory/*.py,**/batch/*.py
alwaysApply: false
---


# gpu-optimization-algorithms

## Memory Distribution Algorithm

Key components in dualgpuopt/optimizer.py:

1. Tensor Split Calculation:
- Calculates optimal memory splits between GPUs based on relative VRAM capacity
- Applies fairness ratio to balance workload proportionally to memory size
- Implements safety margin calculations (default 10%) to prevent OOM conditions
- Generates split ratios for frameworks like llama.cpp and vLLM

2. Layer Distribution Strategy:
- Assigns model layers across GPUs based on memory capacity and layer characteristics
- Uses weighted profiling with dual sequence lengths (64 and 1024 tokens)
- Optimizes placement of compute-intensive layers on faster GPU
- Maintains minimum block size of 3 layers to prevent fragmentation

3. Memory Management (dualgpuopt/memory/profiler.py):
- Real-time leak detection using sliding window analysis
- Memory growth pattern detection with regression-based analysis
- Session-based profiling with baseline tracking
- Alert thresholds for spikes (>threshold MB/s) and leaks (sustained growth)

4. Smart Batching (dualgpuopt/batch/smart_batch.py):
- Length-aware batch scheduling optimized for GPU inference 
- Dynamic batch size calculation based on:
  - Available GPU memory
  - Model architecture parameters
  - Token memory requirements
  - Safety margins
- OOM recovery with 25% batch size reduction
- Automatic recovery after 5 successful batches

## Memory Recovery System

Located in dualgpuopt/memory/recovery.py:

1. Recovery Strategy:
- Implements multi-tier memory reclamation:
  - Cache clearing (CUDA/PyTorch)
  - Clock reset via NVML
  - Full memory reset
  - System-level commands
- Cross-platform support (Windows/Linux)
- Success verification through before/after comparisons

2. Memory Monitoring:
- Continuous monitoring of memory usage patterns
- Early warning system with configurable thresholds:
  - Warning: 80% usage
  - Critical: 90% usage
  - Emergency: 95% usage
- Real-time projection system for OOM prevention

$END$