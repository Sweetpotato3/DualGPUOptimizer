---
description: Technical documentation for GPU optimization algorithms used in dual GPU setups for deep learning model inference
globs: **/optimizer.py,**/gpu_info.py,**/memory/*.py,**/batch/*.py
alwaysApply: false
---


# gpu-optimization-algorithms

GPU Memory Split Calculation (optimizer.py):
- Calculates optimal memory distribution across dual GPUs based on model parameters
- Determines tensor parallel fractions considering available GPU memory and model size
- Implements safety margin calculations (10% default) to prevent OOM conditions
- Handles KV cache overhead with configurable scaling factor (2.0x default)
- Support for MoE models with expert cache considerations

Layer Balance Optimization (layer_balance.py):
- Distributes model layers across GPUs using weighted sequence length sampling
- Uses 20/80 split between short (64) and long (1024) sequences for profiling
- Implements block merging logic to maintain contiguous layer groups (min 3 layers)
- Considers relative GPU speeds and memory quotas for distribution decisions

Batch Processing System (batch/smart_batch.py):
- Length-aware batch scheduling with dynamic size adjustment
- Implements backpressure mechanism for OOM prevention
- Provides token-aware batching considering sequence lengths
- Uses model-specific memory profiles for batch size optimization

Memory Management (memory/profiler.py):
- Real-time memory usage tracking with pattern analysis
- Linear regression-based leak detection using configurable thresholds
- Differentiates between temporary spikes and sustained leaks
- Associates memory patterns with token processing counts

Memory Recovery System (memory/recovery.py):
- Four-tier recovery strategy:
  - REDUCE_BATCH: Dynamic batch size reduction
  - CLEAR_CACHE: GPU cache management
  - OFFLOAD: CPU/disk offloading
  - TERMINATE: Process termination
- Prioritized execution from least to most disruptive
- Device-specific threshold management

Core Paths:
/dualgpuopt/optimizer.py
/dualgpuopt/layer_balance.py
/dualgpuopt/memory/profiler.py
/dualgpuopt/memory/recovery.py
/dualgpuopt/batch/smart_batch.py

Importance Scores:
- GPU Memory Split: 95 (Core optimization algorithm)
- Layer Balance: 90 (Critical for model performance)
- Batch Processing: 85 (Key workload management)
- Memory Management: 80 (Essential resource control)
- Recovery System: 75 (Important stability feature)

$END$