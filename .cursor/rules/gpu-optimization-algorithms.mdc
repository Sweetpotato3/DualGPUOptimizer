---
description: Handles GPU memory optimization algorithms, tensor splitting, and resource allocation for GPU acceleration
globs: **/gpu/*.py,**/optimizer.py,**/gpu_info.py,**/memory/*.py
alwaysApply: false
---


# gpu-optimization-algorithms

## Core Optimization Components

### Memory Management System
Path: dualgpuopt/memory/profiler.py

Implements real-time memory tracking and leak detection for dual GPU setups:
- Session-based profiling with inference tracking windows
- Linear regression analysis for memory leak patterns
- Growth spike detection with configurable thresholds
- Inference memory delta tracking with 10MB leak threshold

Importance Score: 95 

### GPU Split Calculator
Path: dualgpuopt/optimizer.py

Calculates optimal tensor splits for multi-GPU model deployment:
- Memory fraction determination based on GPU capacities
- KV cache requirement calculations
- Automated context length optimization
- Layer distribution across available devices

Importance Score: 90

### Memory Recovery Engine  
Path: dualgpuopt/memory/recovery.py

Implements tiered recovery strategies for GPU memory management:
- Cache clearing with immediate memory reclamation
- Dynamic batch size reduction
- Memory offloading to CPU
- Process termination based on priority

Importance Score: 85

### Batch Optimization System
Path: dualgpuopt/batch/smart_batch.py

Length-aware batching for inference workloads:
- Token-based batch size calculations
- Memory pressure monitoring
- Automatic retry logic for OOM conditions
- Bucket-based request grouping

Importance Score: 80

### Layer Balance Handler
Path: dualgpuopt/layer_balance.py

Optimizes model layer distribution across GPUs:
- Performance profiling with dual sequence lengths
- Weighted scoring system (20% short/80% long sequences)
- Memory quota enforcement with 90% reserve ratio
- Contiguous block optimization

Importance Score: 85

## Integration Points

### Memory Event System
Path: dualgpuopt/memory/alerts.py

Domain-specific memory event classification:
- Growth spike detection (rapid memory increases)
- Steady leak identification
- Inference boundary tracking
- Session lifecycle monitoring

Importance Score: 75

### GPU Command Generator
Path: dualgpuopt/commands/gpu_commands.py

Framework-specific deployment command generation:
- llama.cpp GPU split parameters
- vLLM tensor parallel configurations 
- Model context size validation
- Memory mapping policies

Importance Score: 70

$END$