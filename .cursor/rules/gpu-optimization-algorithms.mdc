---
description: Specification for GPU optimization algorithms including memory distribution, tensor splits, and allocation strategies
globs: **/optimizer.py,**/gpu_info.py,**/layer_balance.py,**/ctx_size.py
alwaysApply: false
---


# gpu-optimization-algorithms

Core GPU Memory Distribution System:
- Calculates optimal memory splits between multiple GPUs using configurable quotas
- Implements dynamic tensor parallel fraction calculations based on available VRAM
- Memory balancing considers device capabilities and power limits

Location: dualgpuopt/optimizer.py
Importance: 95

Memory Distribution Algorithm:
- Distributes model layers across GPUs based on memory capacity and bandwidth
- Uses weighted layer profiling (20% short sequences, 80% long sequences)
- Dynamically adapts splits based on real-time GPU metrics and thermal constraints
- Accounts for MoE factor adjustments in Mixtral-style architectures

Location: dualgpuopt/layer_balance.py
Importance: 90

Context Size Optimization:
- Calculates maximum safe context length using:
  - Model architecture parameters (layers, heads, dimensions)
  - Available GPU memory across devices
  - Precision requirements (FP16/INT8/INT4)
  - Reserved memory buffer ratios
- Adapts calculations for different model types (Llama, Mistral, Mixtral)

Location: dualgpuopt/ctx_size.py 
Importance: 85

GPU Resource Management:
- Monitors memory utilization ratios for dynamic load balancing
- Tracks performance characteristics for optimal layer distribution
- Implements thermal and power monitoring for workload optimization
- Manages memory-aware GPU pairing and redistribution

Location: dualgpuopt/gpu_info.py
Importance: 80

$END$