---
description: Specification for GPU optimization algorithms and memory management patterns for dual GPU systems
globs: **/optimizer.py,**/gpu_info.py,**/layer_balance.py,**/batch/*.py
alwaysApply: false
---


# gpu-optimization-algorithms

## GPU Resource Management

### Memory Distribution Algorithm
Located in `optimizer.py`:
- Dynamic tensor split calculation based on available VRAM ratios between GPUs
- Automatic reservation of 2GB system memory buffer per GPU
- Progressive memory allocation with 90% max utilization target
- Fallback memory redistribution if primary GPU exceeds 95% utilization

### Layer Balancing System
Located in `layer_balance.py`:
- Layer distribution optimization across dual GPUs using latency profiling
- 20/80 weighted performance ratio between short/long sequences
- Contiguous layer block formation to minimize cross-GPU communication
- Automatic layer redistribution when temperature threshold exceeded

### Memory Optimization
Located in `gpu_info.py`:
- Model parameter chunking based on per-layer memory footprint
- KV cache memory allocation with sliding window optimization
- Tensor parallel split calculation considering:
  * Individual GPU VRAM capacity
  * Model architecture requirements
  * Dynamic batch size scaling

### Batch Processing
Located in `batch/smart_batch.py`:
- Length-aware sequence batching with token ratio optimization
- Dynamic batch size adjustment based on:
  * Available GPU memory
  * Current utilization levels
  * Temperature thresholds
  * Model size parameters

### VRAM Management
Located in `optimizer.py`:
- Progressive memory reclamation strategy:
  1. Cache clearing
  2. Gradient cleanup
  3. Hidden state compression
  4. Emergency model offloading
- Memory pressure detection with 3-level warning system
- Automatic batch size reduction when approaching memory limits

### Performance Optimization
Located in `layer_balance.py`:
- Inter-GPU bandwidth monitoring for optimal layer placement
- Dynamic layer migration based on:
  * GPU temperature gradients
  * Memory pressure levels
  * PCIe bandwidth utilization
  * Processing latency measurements

Importance scores:
- Memory Distribution Algorithm: 95 (core optimization logic)
- Layer Balancing System: 90 (critical performance component)
- Memory Optimization: 85 (key resource management)
- Batch Processing: 80 (workflow optimization)
- VRAM Management: 85 (resource stability)
- Performance Optimization: 75 (supporting optimization)

$END$