---
description: Analyzes GPU memory optimization algorithms, tensor parallel splits, and memory management strategies for dual GPU setups
globs: **/optimizer.py,**/gpu_info.py,**/telemetry.py,**/memory/*.py,**/gpu/*.py
alwaysApply: false
---


# gpu-optimization-algorithms

The GPU optimization system implements memory distribution and tensor parallelism algorithms for dual GPU configurations.

## Memory Split Optimization
File: dualgpuopt/optimizer.py

- Calculates optimal memory splits between GPUs based on:
  - Model architecture parameters (hidden size, layers, heads)
  - Available GPU memory on each device
  - KV cache memory requirements
  - Safety margin allocations
- Implements tensor parallel split calculation:
  - Determines optimal layer distribution
  - Calculates split ratios (e.g. 60/40, 70/30)
  - Handles model-specific requirements

## GPU Memory Management
File: dualgpuopt/memory/profiler.py

- Memory leak detection through sliding window analysis
- Linear regression for memory growth rate calculation
- Session-based memory tracking:
  - Pre/post inference baselines 
  - Per-inference memory deltas
  - Token count correlation
  - Usage pattern analysis
- Categories memory events:
  - Allocations/Deallocations
  - Growth spikes
  - Leaks
  - Inference boundaries

## Memory Reclamation
File: dualgpuopt/vram_reset.py

- Multi-stage GPU memory reclamation:
  1. Cache clearing
  2. Clock reset
  3. Tensor deletion
  4. System-level commands
- Hardware-specific policies for different GPU states
- Cross-platform memory reclamation
- Memory tracking and verification

## Memory Distribution System
File: dualgpuopt/memory/monitor.py

Memory monitoring system with domain-specific thresholds:
- Warning alert: Memory usage ≥75% 
- Critical alert: Memory usage ≥90%
- Emergency alert: Memory usage ≥95%

Implements memory distribution optimization:
- Per-GPU quota allocation
- Dynamic reallocation based on workload
- Cache pressure monitoring
- Automatic cleanup triggers

## Layer Performance Profiling
File: dualgpuopt/layer_balance.py

- Weighted profiling with two sequence lengths:
  - Short sequences (64) weighted at 20%
  - Long sequences (1024) weighted at 80%
- Layer-to-GPU mapping with VRAM quotas
- Custom compute mode and clock management
- Performance correlation modeling

$END$