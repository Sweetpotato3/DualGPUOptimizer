---
description: Specialized rules and documentation for GPU memory optimization algorithms and tensor parallel distribution logic
globs: **/optimizer.py,**/gpu/*.py,**/memory/*.py,**/batch/*.py
alwaysApply: false
---


# gpu-optimization-algorithms

Core GPU Memory Optimization Components:

1. Memory Split Calculator (optimizer.py)
- Calculates optimal memory distribution across multiple GPUs based on:
  * Model parameters (layers, heads, dimensions)
  * Available VRAM per GPU 
  * KV cache requirements per token
  * Safety margins (10% default)
  * Tensor parallelism overhead (20% default)

2. Layer Distribution System (layer_balance.py)
- Distributes model layers across GPUs based on:
  * Layer profiling data for short sequences (64 tokens, 20% weight)
  * Layer profiling data for long sequences (1024 tokens, 80% weight)
  * Available GPU memory quotas
  * Memory reservation ratios

3. Smart Batch Optimization (batch/smart_batch.py)
- Groups similar-length sequences to optimize throughput
- Dynamic batch size adjustment based on:
  * Memory pressure thresholds
  * OOM event detection
  * Backpressure monitoring
  * Total token limits (16,384 default)

4. Memory Recovery System (memory/recovery.py)
- Graduated recovery strategies:
  * CLEAR_CACHE: Basic cache clearing
  * REDUCE_BATCH: Batch size reduction
  * OFFLOAD: CPU/disk offloading
  * TERMINATE: Process termination
- Implements cascading recovery attempt logic

5. Memory Prediction Engine (memory/predictor.py) 
- Projects memory requirements based on:
  * Base model footprint
  * Per-token scaling factors
  * Batch size impact
  * Non-linear growth patterns

Core Business Rules:
- Minimum 20% model allocation per GPU
- MoE models get 20% extra memory allocation
- OOM triggers 25% batch size reduction
- Maximum token count per batch: 16,384
- KV cache overhead factor: 2.0x
- Memory safety margin: 10%
- Temperature emergency threshold: 80Â°C
- Utilization warning threshold: 90%

File Paths:
```
dualgpuopt/
  optimizer.py
  layer_balance.py
  batch/
    smart_batch.py
  memory/
    predictor.py
    recovery.py
```

Importance Scores:
- Memory Split Calculator: 95 (core optimization logic)
- Layer Distribution: 90 (critical for multi-GPU performance)
- Smart Batching: 85 (key throughput optimization)
- Memory Recovery: 80 (stability maintenance)
- Memory Prediction: 75 (proactive optimization)

$END$