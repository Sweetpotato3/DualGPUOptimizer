---
description: Specialized GPU optimization algorithms for dual GPU setups with focus on memory management, tensor parallel splits, and resource allocation
globs: **/optimizer.py,**/gpu_info.py,**/memory/*.py,**/batch/*.py,**/commands/*.py
alwaysApply: false
---


# gpu-optimization-algorithms

Core GPU Optimization Components:

1. Memory Distribution Engine (optimizer.py)
- Calculates optimal memory splits between dual GPUs based on model architecture
- Tensor parallel fraction determination using available VRAM ratios
- Memory requirement analysis per token considering:
  * Model architecture (layers, heads, dimensions) 
  * KV cache overhead
  * Quantization impact
  * Safety margins
- Generates framework-specific commands with optimized parameters

2. Smart Batching System (batch/smart_batch.py)
- Length-aware batch scheduling for dual GPU inference
- Dynamic batch size optimization using OOM recovery:
  * 25% reduction after OOM events
  * 10% increase per 5 successful batches
  * Maximum token sum: 16384 per batch
- Backpressure implementation with configurable thresholds

3. Layer Distribution Algorithm (layer_balance.py) 
- Optimizes layer placement across GPUs using:
  * Weighted sequence length profiling (20/80 ratio)
  * Performance quotas with reserve ratios
  * Contiguous block optimization
- Handles special cases for input embeddings and output components

4. Memory Predictor (memory/predictor.py)
- Model-specific memory profiling for common architectures:
  * Base memory requirements
  * Per-token growth patterns
  * Batch size impact calculations
  * Historical usage analysis
- Dynamic growth projection for memory allocation

5. Memory Recovery System (memory/recovery.py)
- Hierarchical recovery strategies:
  * REDUCE_BATCH: Optimize batch sizes
  * CLEAR_CACHE: Free unused memory
  * OFFLOAD: Move to CPU/disk
  * TERMINATE: Process cleanup
- Progressive intervention with impact assessment

6. Memory Leak Detection (memory/profiler.py)
- Windowed linear regression for leak detection
- Thresholds:
  * Spike detection: Configurable MB/s growth
  * Leak detection: Sustained growth rate
  * Minimum 5MB change requirement
- 30-second cooldown between alerts

Importance Scores:
- Memory Distribution Engine: 95 (Core optimization logic)
- Smart Batching System: 90 (Critical for performance)
- Layer Distribution: 85 (Key resource management)
- Memory Predictor: 80 (Essential for optimization)
- Memory Recovery: 75 (Important safety system)
- Leak Detection: 70 (Supporting optimization)

$END$