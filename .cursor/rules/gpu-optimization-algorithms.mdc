---
description: Guidelines for implementing GPU optimization algorithms and memory management strategies across dual GPU setups
globs: **/optimizer.py,**/gpu_info.py,**/layer_balance.py,**/memory/profiler.py,**/memory/*.py
alwaysApply: false
---


# gpu-optimization-algorithms

Core algorithms for optimizing GPU resource allocation and memory distribution:

1. GPU Layer Distribution Algorithm (layer_balance.py):
- Progressive layer assignment based on relative GPU performance
- Weighted workload distribution using 20%/80% split for short/long sequences 
- Block merging logic to maintain contiguous chunks with min size of 3 layers
- Dynamic rebalancing based on runtime profiling data
- Quota-based assignment system with configurable reserve ratio (90% default)

2. Memory Profiling and Leak Detection (memory/profiler.py):
- Rolling window analysis (60s) for memory growth pattern detection
- Leak classification using linear regression on memory deltas
- Spike detection via threshold-based growth rate analysis (>0.1)
- Token-count correlation tracking for memory retention
- Per-GPU memory timeline maintenance with 30s alert cooldown

3. Context Size Optimization (optimizer.py):
- KV cache scaling calculation using model architecture
- Dynamic tensor parallel fraction calculation
- MoE expert count adjustment for mixture models
- Heuristic safety margins (10% default) for memory buffers
- Minimum context enforcement (128 tokens)

4. GPU Split Calculation (optimizer.py):
- Memory ratio-based distribution between GPUs
- Tensor parallelism overhead factoring (20%)
- Framework-specific command generation for llama.cpp/vLLM
- Model architecture parameter validation 
- Memory fragmentation prevention with 512MB splits

5. Memory Recovery System (memory/recovery.py):
- Multi-stage VRAM reclamation:
  * Cache-only clear
  * Clock reset
  * Full tensor release
  * System-level cleanup
- Before/after memory tracking
- Platform-specific implementations (Windows/Linux)

File Paths:
- dualgpuopt/optimizer.py
- dualgpuopt/gpu_info.py 
- dualgpuopt/layer_balance.py
- dualgpuopt/memory/profiler.py
- dualgpuopt/memory/recovery.py

$END$