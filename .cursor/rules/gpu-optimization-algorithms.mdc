---
description: Technical specification for GPU optimization algorithms and memory allocation strategies in dual-GPU setups.
globs: **/optimizer.py,**/gpu_info.py,**/memory/*.py,**/engine/*.py
alwaysApply: false
---


# gpu-optimization-algorithms

## Core Memory Allocation Logic

1. Dynamic Layer Distribution Algorithm
- Calculates optimal split ratios for model layers across dual GPUs based on:
  * Available VRAM per GPU 
  * Layer execution latencies
  * KV cache requirements
  * Attention mechanism overhead
- Enforces minimum memory thresholds per GPU (20% of model size)
- Implements weighted profiling using 64 and 1024 token sequences
- Score: 95

2. Tensor Parallel Split Calculation
- Generates tensor parallel fractions normalized to largest GPU memory
- Handles asymmetric GPU configurations with dynamic ratio adjustments
- Calculates memory reservation buffer based on model architecture
- Score: 90

3. Memory Optimization Pipeline
- Smart batching system with auto-scaling based on:
  * Peak memory utilization 
  * Token length distributions
  * Model architecture requirements
- OOM detection with progressive recovery strategy:
  * Cache clearing
  * Batch size reduction
  * Memory defragmentation
- Score: 85

## Memory Management System

1. Dynamic Cache Management
- LRU-based engine caching with size-aware eviction
- Health monitoring with automatic recovery
- Prometheus metrics integration for cache performance
- Score: 80

2. Memory Profile Analysis
- Real-time profiling of:
  * Growth spikes
  * Memory leaks
  * Post-inference retention
- Memory timeline analysis with 60-second retention
- Score: 75

3. Memory Recovery System
- Multi-strategy VRAM reclamation:
  * CACHE_ONLY: PyTorch cache clearing
  * CLOCK_RESET: GPU clock resets
  * FULL_RESET: Comprehensive reclamation
  * SYSTEM_CMD: OS-specific commands
- Pre/post reset memory state validation
- Score: 85

Relevant File Paths:
```
dualgpuopt/optimizer.py
dualgpuopt/memory/profiler.py  
dualgpuopt/memory/recovery.py
dualgpuopt/engine/pool/core.py
dualgpuopt/layer_balance.py
```

$END$