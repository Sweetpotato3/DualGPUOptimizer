---
description: Specifications for GPU resource monitoring and telemetry system implementation for multi-GPU optimization
globs: **/telemetry.py,**/metrics.py,**/tray.py,**/dashboard.py
alwaysApply: false
---


# resource-monitoring-system

The resource monitoring system consists of three key components:

1. GPU Telemetry Collection (telemetry.py)
Importance Score: 95
- Real-time GPU metrics collection through NVML interface:
  - Memory utilization tracking (used/total/free)
  - Compute utilization percentage
  - Power consumption against power limits
  - Temperature monitoring with thresholds
  - PCIe bandwidth measurement (TX/RX)
  - Clock speeds (graphics/memory)
  - Fan speed percentages
- Custom idle detection with configurable thresholds
- Middleware pipeline for metrics processing and distribution
- Mock data generation for testing/failure scenarios

2. Metrics Processing Pipeline (metrics.py)
Importance Score: 85
- Domain-specific GPU metrics aggregation:
  - Rolling history buffer (60 data points)
  - Automatic unit conversion (mW to W, bytes to MB/GB)
  - Temperature-based alert generation
  - Utilization pattern analysis
- Event-driven metric distribution system
- Custom thresholding logic for resource alerts

3. Dashboard Integration (dashboard.py)
Importance Score: 80
- Multi-GPU visualization system with:
  - Per-GPU color coding
  - Dynamic metric scaling
  - Automatic grid adjustment
  - Alert indicator overlays
- Resource utilization history graphing
- Critical threshold visualization
- Power draw normalization (400W baseline)

Key File Paths:
- dualgpuopt/telemetry.py
- dualgpuopt/metrics.py
- dualgpuopt/gui/dashboard.py

The system specializes in dual-GPU monitoring with emphasis on ML workload optimization and resource utilization tracking. Implementation includes specialized handling of GPU-specific metrics and intelligent aggregation for performance analysis.

$END$