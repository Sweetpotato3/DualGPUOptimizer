---
description: Specification for GPU resource monitoring, telemetry collection, and metrics tracking subsystem
globs: **/telemetry.py,**/metrics.py,**/tray.py,**/dashboard.py
alwaysApply: false
---


# resource-monitoring-system

The resource monitoring system implements specialized GPU telemetry collection and visualization with these core components:

1. GPU Telemetry Collection (telemetry.py)
- Real-time monitoring of critical GPU metrics:
  * Memory utilization (used/total/free)
  * Temperature with threshold alerts (70°C warning, 80°C critical)
  * Power consumption relative to TDP
  * Core/Memory clock speeds
  * PCIe bandwidth utilization
  * Fan speeds with auto/manual control
- Custom middleware pipeline for metrics processing
- Mock data generation for testing with realistic correlations
- Thread-safe metrics buffer with 60-sample rolling window

2. Metrics Dashboard (dashboard.py)
- Multi-GPU visualization system with:
  * Color-coded indicators per GPU
  * Dynamic scaling for utilization graphs
  * Temperature-based warning indicators
  * Real-time update system (100ms throttling)
- Performance history plotting with:
  * 60-point historical data window
  * Auto-adjusting axes and scales
  * GPU-specific color coding
  * Customizable metric thresholds

3. System Tray Integration (tray.py)
- Quick-access GPU metrics from system tray
- Critical threshold notifications
- GPU utilization indicators
- Memory warning system

Importance Scores:
- GPU Telemetry Collection: 95 (core monitoring functionality)
- Metrics Dashboard: 85 (critical visualization)
- System Tray Integration: 65 (supporting monitoring interface)

The implementation focuses specifically on dual-GPU setups with framework-specific optimizations for monitoring ML workloads and model inference processes.

$END$