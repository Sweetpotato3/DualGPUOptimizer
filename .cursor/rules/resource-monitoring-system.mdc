---
description: Core specification for GPU resource monitoring, telemetry collection, and real-time metric analysis systems
globs: **/telemetry.py,**/metrics.py,**/tray.py,**/gpu_info.py,**/dashboard.py
alwaysApply: false
---


# resource-monitoring-system

## Core Telemetry System

### GPU Metrics Collection (telemetry.py)
- Implements real-time GPU metrics tracking through NVML integration
- Collects comprehensive metrics:
  - Memory utilization 
  - PCIe bandwidth (RX/TX)
  - Temperature monitoring
  - Power consumption tracking
  - Clock speeds (graphics/memory)
- Uses middleware pattern for metrics processing
- Includes idle detection with 5-minute threshold

### Metrics Processing Pipeline (metrics.py)
- Maintains rolling 60-sample history window for trend analysis
- Implements domain-specific thresholds:
  - Temperature warning at 80Â°C
  - Power limit enforcement
  - Memory pressure alerts
- Dynamic metric scaling based on GPU capabilities
- Automatic unit conversion (mW to W, bytes to MB/GB)

### Dashboard Visualization (dashboard.py)
- Real-time GPU telemetry visualization for multiple GPUs
- Custom progress bar styling per GPU index
- Color-coded metric display:
  - Temperature thresholds (green/orange/red)
  - Memory utilization gradients
  - Power consumption relative to TDP
- Rolling metrics history graphs with 60-point window

### Resource Monitoring Alert System
- Multi-level alert hierarchy:
  - Warning: High utilization/temperature
  - Critical: Near memory limits
  - Emergency: Thermal throttling risk
- Automatic CUDA cache clearing on memory pressure
- Temperature-based fan speed adjustment
- Power limit enforcement with throttling detection

### File Paths
- dualgpuopt/telemetry.py
- dualgpuopt/metrics.py
- dualgpuopt/gui/dashboard.py
- dualgpuopt/gpu_info.py

Importance Scores:
- Telemetry System: 95 (Core monitoring infrastructure)
- Metrics Pipeline: 85 (Critical data processing)
- Dashboard: 75 (Key visualization)
- Alert System: 80 (Safety monitoring)

$END$