---
description: Specification for GPU resource monitoring, telemetry collection, and performance tracking systems
globs: **/telemetry.py,**/metrics.py,**/tray.py,**/gpu_info.py
alwaysApply: false
---


# resource-monitoring-system

### Telemetry Collection System
- **GPU Metrics Pipeline** (`telemetry.py`):
  - Collects real-time GPU metrics including utilization, memory usage, temperature, power draw
  - Processes metrics through middleware pipeline for event bus publishing and logging
  - Maintains telemetry history for trend analysis and visualization
  - Handles NVML initialization and shutdown gracefully

### Resource Monitoring Service 
- **Metrics Processing** (`metrics.py`):
  - Calculates rolling averages and peak values for GPU metrics
  - Tracks PCIe bandwidth utilization between GPUs
  - Monitors memory fragmentation and cache hit rates
  - Generates resource usage reports for optimization analysis

### Alert System
- **Idle Detection** (`tray.py`):
  - Monitors GPU utilization patterns to detect extended idle periods
  - Triggers notifications after 5 minutes of low GPU usage
  - Suggests resource cleanup actions to users
  - Maintains alert history and suppression logic

### GPU Information Service
- **Hardware Probing** (`gpu_info.py`):
  - Detects available GPUs and their capabilities
  - Monitors thermal throttling events and power state changes
  - Tracks memory allocation/deallocation patterns
  - Reports GPU clock speeds and performance states

Importance Scores:
- Telemetry Collection: 95 (Core monitoring functionality)
- Resource Monitoring: 90 (Critical performance tracking)
- Alert System: 85 (Important user notification system)
- GPU Information: 80 (Key hardware integration)

$END$