---
description: Specification for GPU resource monitoring, telemetry collection, and metrics visualization system
globs: **/telemetry.py,**/metrics.py,**/dashboard.py,**/event_dashboard.py,**/tray.py
alwaysApply: false
---


# resource-monitoring-system

### Telemetry Collection System
The telemetry system implements comprehensive GPU resource monitoring through:

- Real-time metrics collection for GPU utilization, memory usage, temperature, power consumption, fan speed, and clock speeds
- Middleware pipeline architecture for telemetry processing with:
  - EventBusMiddleware for publishing metrics to event bus
  - LoggingMiddleware for debug logging
- Idle detection mechanism that monitors GPU utilization and triggers notifications after 5 minutes of inactivity

### Metrics Visualization 
Dashboard components provide real-time visualization through:

- Dynamic GPU metrics display showing utilization, memory, PCIe throughput, temperature, power usage
- Historical utilization graph with:
  - Fading effect for timeline visualization
  - Smooth curve interpolation for trend analysis 
  - Per-GPU color coding
- Bandwidth formatting with automatic unit scaling (KB/s to GB/s)

### Event-Driven Updates
The monitoring system implements:

- High-priority subscription to GPUMetricsEvent for dashboard updates
- Dynamic UI component initialization based on GPU detection
- Real-time metrics refresh every 3 seconds
- 60-sample rolling history for trend analysis

### Status Notifications
System tray integration provides:

- GPU idle state monitoring
- User notifications for extended idle periods
- Quick access to GPU utilization status
- Configuration options for notification preferences

Relevant Files:
```
dual_gpu_optimizer/dualgpuopt/telemetry.py
dual_gpu_optimizer/dualgpuopt/metrics.py
dual_gpu_optimizer/dualgpuopt/gui/dashboard.py
dual_gpu_optimizer/dualgpuopt/gui/event_dashboard.py
dual_gpu_optimizer/dualgpuopt/tray.py
```

$END$