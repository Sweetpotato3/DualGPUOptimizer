---
description: Implements telemetry and resource monitoring system focused on GPU metrics, utilization tracking, and alert mechanisms.
globs: dualgpuopt/telemetry.py,dualgpuopt/tray.py
alwaysApply: false
---


# resource-monitoring-system

The GPU resource monitoring system implements specialized telemetry collection and alert management for dual GPU configurations.

Core Components:

1. GPU Metrics Collection (telemetry.py)
- Comprehensive GPU monitoring with key metrics:
  * Memory utilization and pressure
  * Temperature thresholds
  * Power usage and limits
  * PCIe bandwidth consumption
  * Clock speeds (Graphics/Memory)

2. Alert Level Classification (telemetry.py)
- Multi-tier alert system with severity thresholds:
  * EMERGENCY: Memory usage ≥95%, Temperature ≥90°C
  * CRITICAL: Memory usage ≥90%, Temperature ≥80°C, Power usage ≥98%
  * WARNING: Memory usage ≥75%, Temperature ≥70°C, Power usage ≥90%
  * NORMAL: Below warning thresholds

3. Fault Tolerance Design
- Progressive recovery mechanism for NVML failures:
  * Exponential backoff between recovery attempts
  * Maximum recovery attempts configurable 
  * Automatic fallback to mock data after failures
  * Service continuity through hardware/driver issues

4. Historical Metrics Management
- Rolling 60-second history buffer for GPU metrics
- Time-window based metric queries
- Memory-efficient storage with automatic pruning
- Correlation tracking between related metrics

5. Mock Data Generation
- Realistic GPU behavior simulation:
  * RTX 5070 Ti profile (24GB memory, 350W power limit)
  * RTX 4060 profile (12GB memory, 200W power limit)
  * Dynamic metric correlation (utilization affects temperature)
  * Variance generation based on timestamps

Importance Scores:
- GPU Metrics Collection: 95 (Core telemetry functionality)
- Alert Classification: 90 (Critical monitoring logic)
- Fault Tolerance: 85 (Key reliability feature)
- Historical Management: 75 (Important analysis capability)
- Mock Generation: 60 (Supporting development feature)

$END$