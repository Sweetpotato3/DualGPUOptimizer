---
description: Resource monitoring system specification focused on hardware metrics, telemetry collection, and alert mechanism implementations
globs: **/telemetry.py,**/metrics.py,**/monitor.py,**/alerts.py,**/sensors/**
alwaysApply: false
---


# resource-monitoring-system

Core Business Logic:

1. GPU Metrics Collection System
- Collects realtime GPU performance metrics:
  - Utilization percentage 
  - Memory usage/availability
  - Temperature
  - Power consumption
  - PCIe bandwidth
  - Clock speeds (SM and memory)
  - Fan speeds
- Maintains 60-second rolling history per GPU
- Implements alert system with 4 severity levels:
  - NORMAL: Within safe thresholds
  - WARNING: Memory ≥75% or Temp ≥70°C
  - CRITICAL: Memory ≥90% or Temp ≥80°C 
  - EMERGENCY: Memory ≥95% or Temp ≥90°C

2. Telemetry History Management
- Rolling 60-second metrics buffer for each GPU
- Aggregated cross-GPU metrics:
  - Average utilization
  - Total memory usage/availability  
  - Average temperature
- Automatic pruning of data older than 60 seconds
- Thread-safe sample series implementation

3. Error Recovery System
- Exponential backoff for consecutive failures
- Maximum 5 consecutive errors before fallback
- Mock data generation with realistic characteristics:
  - High-end GPU profile (24GB VRAM, 350W)
  - Mid-range GPU profile (12GB VRAM, 200W)
- Recovery attempt limit of 3 (configurable)

4. Alert Management
- Publishes alerts through event bus system
- Triggers system tray notifications
- Status badge visualization with color coding
- Priority-based alert queue with 3-second delay

File Paths:
- dualgpuopt/telemetry.py
- dualgpuopt/memory/monitor.py 
- dualgpuopt/services/alerts.py
- dualgpuopt/services/telemetry.py

$END$