---
description: Business logic specification for GPU resource monitoring, telemetry collection, and alert system implementation
globs: **/telemetry.py,**/metrics.py,**/monitor.py,**/alerts.py,**/tray.py
alwaysApply: false
---


# resource-monitoring-system

The resource monitoring system encompasses three core components:

1. GPU Telemetry Collection:
- Real-time monitoring of GPU utilization, memory usage, temperature, power consumption, PCIe bandwidth and clock speeds
- Implements middleware pattern for metrics processing with customizable handlers
- Provides event bus integration for telemetry data publishing as GPUMetricsEvent
- Includes fallback mock data generation for testing environments

2. Resource Monitoring:
- Configurable sample history (60 samples) for performance trending
- Bandwidth threshold monitoring for PCIe with auto-scaling (KB/s to GB/s)
- Progressive metric display with hardware-specific maximums:
  * Graphics clock: 2500 MHz cap 
  * Memory clock: 12000 MHz cap
  * Temperature: 100Â°C cap
  * Power usage: Per-GPU limit

3. Alert System:
- Multi-level alert thresholds (WARNING, CRITICAL, EMERGENCY) for:
  * Memory pressure
  * Temperature limits
  * Power consumption
  * PCIe bandwidth saturation
- Alert policy management with customizable actions per severity level
- Recovery strategy orchestration based on alert severity
- Event publishing for alert state changes

Key Files:
- `dualgpuopt/telemetry.py`: Core telemetry collection system
- `dualgpuopt/metrics.py`: Metric processing and storage
- `dualgpuopt/monitor.py`: Resource monitoring and threshold management
- `dualgpuopt/alerts.py`: Alert system implementation
- `dualgpuopt/tray.py`: System tray integration for alert display

The system is specifically designed to handle dual GPU configurations with emphasis on real-time monitoring and alert generation for machine learning workloads.

$END$