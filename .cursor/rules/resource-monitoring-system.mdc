---
description: Resource monitoring configuration and telemetry system setup for collecting GPU performance and memory metrics.
globs: */telemetry.py,*/metrics.py,*/tray.py,*/memory_monitor.py
alwaysApply: false
---


# resource-monitoring-system

The resource monitoring system implements GPU performance telemetry and memory tracking through these key components:

## GPU Telemetry Service (telemetry.py) 
Importance: 95

Core collection system for real-time GPU performance metrics:

- Comprehensive metric gathering:
  - GPU utilization percentages 
  - Memory usage and allocation
  - Temperature with thresholds (70°C warning, 80°C critical)
  - Power consumption curves
  - Fan speeds and clock rates
  - PCIe bandwidth utilization

- Four-level alert classification:
  - NORMAL: Within expected parameters
  - WARNING: Approaching limits
  - CRITICAL: Resource constraints
  - EMERGENCY: Imminent failure conditions

## Memory Monitor (memory_monitor.py)
Importance: 90

Memory profiling and OOM prevention system:

- Model-specific memory profiles:
  - Base memory requirements
  - Per-batch consumption rates  
  - Per-token tracking
  - Growth projections
  - Recovery buffer specs

- Four-tier recovery strategy:
  1. Cache clearing
  2. Batch size reduction 
  3. Memory offloading
  4. Process termination

- Model architectures supported:
  - Llama2 (7B, 13B, 70B)
  - Mistral-7B
  - Mixtral-8x7B

## System Tray Integration (tray.py)
Importance: 65

System tray monitoring interface providing:

- Real-time GPU metric display
- Memory pressure indicators
- Temperature warnings
- Utilization graphs
- Quick actions for memory recovery

The monitoring system focuses on preventing OOM conditions while maximizing throughput for large language models through comprehensive telemetry collection and memory profiling.

$END$