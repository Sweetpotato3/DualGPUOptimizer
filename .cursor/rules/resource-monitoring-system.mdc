---
description: Handles GPU resource monitoring, telemetry collection, and alert systems for dual GPU optimization
globs: '**/telemetry.py','**/tray.py','**/metrics.py','**/memory_monitor.py','**/dashboard.py'
alwaysApply: false
---


# resource-monitoring-system

### GPU Telemetry Collection Engine

Core telemetry system that monitors GPU metrics including:
- Memory utilization and VRAM pressure tracking
- Temperature and power consumption thresholds
- GPU/Memory clock speeds
- PCIe bandwidth utilization
- Fan speeds and thermal conditions

Implementation prioritizes:
1. Real-time metrics collection via NVML
2. Memory pressure detection with configurable thresholds (80%, 90%, 95%)
3. Multi-level alert system with severity classification
4. Historical metrics tracking for trend analysis

### Memory Management and OOM Prevention

Memory monitor implements hierarchical recovery strategies:
1. Cache clearing when memory pressure exceeds 80%
2. Batch size reduction at 90% threshold
3. Memory offloading at 95% threshold 
4. Process termination as last resort

Model-specific memory profiles track:
- Base memory requirements per architecture
- Token-level memory scaling factors
- Batch processing overhead
- KV cache growth patterns

### Dashboard Visualization System

Real-time visualization components:
- Multi-GPU line charts with 60-sample history
- Dynamic progress bars with color-coded thresholds
- Adaptive bandwidth formatting (KB/s → MB/s → GB/s)
- Temperature warning indicators

Implementation in dashboard.py handles:
- GPU-specific color coding for metrics
- Automatic grid scaling based on sample count
- Intelligent label placement for readability
- Configurable update intervals per metric type

### Alert Mechanism

Four-level alert system:
1. Normal: Below 80% memory utilization
2. Warning: 80-90% utilization
3. Critical: 90-95% utilization  
4. Emergency: Above 95% utilization

Each level triggers specific actions:
- Status updates to system tray
- Memory optimization recommendations
- Automatic intervention based on severity
- Event logging for post-analysis

Relevant paths:
```
dualgpuopt/telemetry.py
dualgpuopt/memory_monitor.py
dualgpuopt/gui/dashboard.py
dualgpuopt/tray.py
```

$END$