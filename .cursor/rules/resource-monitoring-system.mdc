---
description: Specification for GPU resource monitoring, telemetry collection, and metric visualization systems
globs: **/telemetry.py,**/metrics.py,**/gpu_info.py,**/dashboard.py,**/event_dashboard.py
alwaysApply: false
---


# resource-monitoring-system

### GPU Telemetry Collection Engine
- Collects comprehensive real-time GPU metrics through NVML including:
  - Memory usage and utilization percentages
  - Temperature and power consumption
  - Fan speeds and clock rates
  - PCIe throughput
- Implements parallel GPU probing using thread pools for efficient data collection
- Supports mock GPU data generation for testing environments

### Real-Time Metric Processing Pipeline
- Event-driven middleware architecture processes raw telemetry data:
  - EventBusMiddleware publishes metrics to subscribers
  - LoggingMiddleware maintains metric history
  - PrometheusMiddleware exports metrics (optional)
- Maintains rolling history of utilization metrics for trending
- Supports pluggable metric transformers for data normalization

### Resource Alert System
- Monitors GPU idle states and triggers notifications after 5 minutes of inactivity
- Tracks memory usage thresholds and alerts on potential OOM conditions
- Supports custom alert rules based on temperature and power thresholds

### Visualization Components
- Real-time GPU metrics dashboard showing:
  - Utilization graphs with historical data
  - Memory usage breakdowns
  - Temperature and power readings
  - Clock speed monitoring
- Color-coded status indicators for different resource states
- Dynamic GPU discovery and display adaptation

### Key Files
- `telemetry.py`: Core telemetry collection and processing
- `metrics.py`: Metric definitions and Prometheus integration
- `gpu_info.py`: GPU data structure and mock implementations
- `dashboard.py`: Main visualization components
- `event_dashboard.py`: Event-driven metric display updates

$END$