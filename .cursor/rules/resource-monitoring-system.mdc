---
description: Resource monitoring and telemetry system for tracking GPU metrics, utilization, and alerts in a dual GPU optimization system
globs: **/telemetry.py,**/tray.py,**/gpu_info.py,**/monitor.py,**/metrics.py
alwaysApply: false
---


# resource-monitoring-system

Core telemetry system for monitoring GPU resources and metrics:

1. GPU Metrics Collection (telemetry.py):
- Collects critical GPU metrics with thresholds:
  - Memory utilization: 75%, 90%, 95%
  - Temperature thresholds: 70°C, 80°C, 90°C  
  - Power consumption: 90%, 98% of limit
- Alert severity levels: NORMAL -> WARNING -> CRITICAL -> EMERGENCY
- Exponential backoff for NVML recovery (max 3 attempts)
- Maintains 60-second history window per GPU

2. Mock GPU Simulation (telemetry.py):
- Realistic GPU device simulation:
  - RTX 5070 Ti: 24GB memory, 350W power limit
  - RTX 4060: 12GB memory, 200W power limit
- Correlates simulated metrics:
  - Power usage: 20-90% of limit based on utilization
  - Fan speed follows temperature curve
  - Memory usage scales with utilization
  - PCIe traffic aligns with GPU activity

3. Memory Monitoring System (monitor.py):
- Dynamic memory tracking across dual GPUs:
  - Per-device memory usage statistics
  - Utilization percentage calculation 
  - Usage pattern analysis with thresholds
- Emergency memory response system:
  - Critical threshold detection (>95% usage)
  - Automatic cache clearing triggers
  - OOM prevention through monitoring

4. Telemetry Event Processing:
- Dual event publication system:
  - Enhanced format with aggregated GPU metrics
  - Legacy format for backward compatibility
- Temperature monitoring callbacks
- Memory pressure alerts
- Utilization tracking and notification

5. GPU State Recovery:
- NVML initialization retry logic:
  - Exponential backoff between attempts
  - Auto-fallback to mock data after failures
  - State preservation during recovery
  - Error tracking and history maintenance

File Paths:
- dualgpuopt/telemetry.py
- dualgpuopt/memory/monitor.py
- dualgpuopt/memory/metrics.py

$END$