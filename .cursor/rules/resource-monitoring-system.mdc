---
description: Provides implementation details for GPU resource monitoring, telemetry collection, and performance tracking across multi-GPU systems
globs: **/telemetry.py,**/gpu_info.py,**/metrics.py,**/tray.py,**/dashboard.py
alwaysApply: false
---


# resource-monitoring-system

GPU Resource Monitoring System for ML workloads with specialized telemetry collection, processing and alerting capabilities.

Core Components:

1. Telemetry Collection Pipeline
- Streams real-time GPU metrics including:
  * Memory utilization (total/used/free)
  * PCIe bandwidth (RX/TX rates)
  * Power consumption and thermal status
  * Clock speeds (graphics/memory)
  * GPU and memory utilization percentages
- Implements middleware for metrics processing:
  * EventBusMiddleware for event distribution
  * LoggingMiddleware for debug information
- Provides fallback to mock data generation when hardware access fails

2. Performance Monitoring
- Custom threaded metrics collection with configurable intervals:
  * 500ms for critical metrics  
  * 1000ms for standard metrics
  * 2000ms for background metrics
- Maintains 60-point historical data buffer for trend analysis
- Color-coded GPU activity visualization with distinct colors per GPU

3. Memory Management
- Implements multi-tier memory alert system:
  * WARNING (80% utilization)
  * CRITICAL (90% utilization)
  * EMERGENCY (95% utilization)
- Model-specific memory profiles with:
  * Base memory requirements
  * Per-batch memory scaling
  * Growth rate projections
- Predictive memory consumption modeling using rolling 100-point history

4. Alert Mechanism
- Real-time threshold monitoring for:
  * Temperature caps with 100Â°C limit
  * Power usage against GPU-specific maximums  
  * PCIe bandwidth auto-scaling (KB/s-GB/s)
  * Memory pressure detection
- Implements recovery strategies:
  1. Cache clearing
  2. Batch size reduction
  3. Memory offloading
  4. Process termination

File Paths:
- dualgpuopt/telemetry.py: Core telemetry collection
- dualgpuopt/memory_monitor.py: Memory management system
- dualgpuopt/gui/dashboard.py: Monitoring visualization
- dualgpuopt/tray.py: System tray integration

$END$