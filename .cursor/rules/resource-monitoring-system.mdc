---
description: Resource monitoring and telemetry system for tracking GPU metrics, utilization, and generating alerts
globs: **/telemetry.py,**/tray.py,**/dashboard.py,**/event_dashboard.py,**/metrics.py
alwaysApply: false
---


# resource-monitoring-system

## Core Telemetry Collection
The telemetry system continuously collects and processes GPU metrics including:
- Utilization rates for compute and memory
- Temperature readings
- Power consumption levels
- Clock speeds (core and memory)
- PCIe bandwidth utilization
- Memory allocation and usage

## Real-time Monitoring Pipeline 
- Telemetry collector runs on configurable intervals (default 1s)
- Implements middleware pattern for metric processing:
  - Raw data collection from NVML
  - Metric normalization and formatting
  - Event bus publishing for UI updates
  - History tracking for graphs

## GPU Idle Detection
- Monitors GPU utilization patterns over time
- Triggers alerts when GPUs remain below threshold for 5+ minutes
- Suggests freeing resources through system tray notifications
- Customizable idle thresholds and monitoring periods

## Metrics Dashboard
- Live utilization graphs with 60-point history
- Per-GPU metrics display with color coding
- Automatic scaling for bandwidth values (KB/s to GB/s)
- Dynamic UI updates based on detected GPUs

## Alert System
- Threshold-based alerting for:
  - High temperature conditions
  - Sustained high utilization
  - Memory bottlenecks
  - Power limit warnings
- Alerts published through event bus
- System tray integration for notifications

Importance Scores:
- Telemetry Collection: 95 (Core monitoring functionality)
- Real-time Pipeline: 85 (Critical data flow)
- Idle Detection: 75 (Resource optimization)
- Metrics Dashboard: 70 (Visualization)
- Alert System: 80 (System health monitoring)

$END$