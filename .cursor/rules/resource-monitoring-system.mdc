---
description: Rules for implementing GPU resource monitoring, telemetry collection, and alert systems in dual GPU optimization scenarios
globs: 
alwaysApply: false
---


# resource-monitoring-system

The resource monitoring system implements real-time GPU telemetry collection and alerting with these key components:

1. GPU Telemetry Collector
File: dualgpuopt/telemetry.py
- Collects core GPU metrics on configurable intervals (default 1000ms):
  * Utilization percentage
  * Memory usage (used/total/free)
  * Temperature in Celsius
  * Power draw in Watts
  * Fan speeds
  * Clock speeds (core/memory)
- Implements exponential backoff on failures (starts at 100ms, caps at 2000ms)
- Provides mock metrics generation for development/testing

2. Memory Alert System 
File: dualgpuopt/memory/alerts.py
- Defines critical thresholds:
  * Warning: 80% memory utilization
  * Critical: 90% memory utilization  
  * Emergency: 95% memory utilization
- Triggers automatic recovery actions:
  * Cache clearing at Warning level
  * Batch size reduction at Critical
  * Process termination at Emergency
- Maintains alert history for trend analysis

3. GPU Monitor
File: dualgpuopt/gpu/monitor.py
- Real-time monitoring of dual GPU configurations
- Tracks synchronized metrics across both GPUs
- Implements correlated metrics tracking:
  * Power/Temperature relationship
  * Memory/Utilization patterns
  * Clock speed/Performance impact
- Provides automatic failover to mock mode on hardware issues

4. Metric Collection System
File: dualgpuopt/metrics.py
- Maintains 60-second rolling window of GPU metrics
- Calculates derivative metrics:
  * Memory pressure index
  * Thermal throttling risk
  * Overall GPU health score
- Implements normalized metric scaling for cross-GPU comparison

The system focuses on proactive resource management through continuous monitoring and automated intervention based on predefined thresholds and recovery strategies.

$END$