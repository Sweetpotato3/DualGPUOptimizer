---
description: Documentation for resource monitoring and GPU metrics collection functionality in a dual GPU optimization system.
globs: **/telemetry.py,**/tray.py,**/metrics.py,**/services/event_*.py
alwaysApply: false
---


# resource-monitoring-system

The resource monitoring system implements specialized GPU telemetry collection and analysis with the following key components:

## GPU Metrics Collection (telemetry.py)
Importance: 95

Core metrics collection engine gathers real-time GPU performance data:
- GPU utilization percentage 
- Memory usage and bandwidth
- PCIe throughput (RX/TX rates)
- Temperature monitoring
- Power consumption in watts
- Fan speeds and clock frequencies

Custom middleware pipeline processes raw GPU metrics:
- EventBusMiddleware transforms telemetry into structured GPU events
- LoggingMiddleware handles diagnostic data recording
- Thread-safe queue manages metrics distribution

## Resource Usage Detection (tray.py)
Importance: 85

Implements specialized GPU resource monitoring:
- Idle GPU detection after configurable 5-minute threshold
- System tray notifications for underutilized GPU resources
- Automatic power state management based on usage patterns

## Metrics Processing Engine (metrics.py)
Importance: 90

Processes synchronized telemetry data streams:
- Real-time bandwidth conversion (KB/s to GB/s)
- Temperature display capping at 100Â°C  
- Power usage scaled to GPU-specific limits
- Clock speeds normalized to maximum frequencies

## Event Management (services/event_bus.py)
Importance: 80

Specialized event system for GPU monitoring:
- Priority-based GPU event processing
- GPU-specific event types (metrics, optimization, alerts)
- Event type locking for security-critical operations

The monitoring system maintains a 60-sample rolling window of historical data and implements fault tolerance through mock data generation when hardware monitoring fails.

$END$