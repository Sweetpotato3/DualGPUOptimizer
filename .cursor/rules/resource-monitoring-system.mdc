---
<<<<<<< HEAD
description: Specification for GPU resource monitoring, telemetry collection, and metrics visualization systems
globs: **/telemetry.py,**/tray.py,**/metrics.py,**/gpu_info.py,**/dashboard.py
=======
description: Specification for GPU resource monitoring, telemetry collection, and metrics visualization system
globs: **/telemetry.py,**/metrics.py,**/dashboard.py,**/event_dashboard.py,**/tray.py
>>>>>>> 199829b (Update documentation for DualGPUOptimizer to provide a high-level overview of GPU optimization and model inference systems. Organized content into key components: Core GPU Management, Model Optimization Engine, Command System, Monitoring Dashboard, and State Management. Enhanced glob patterns for improved file matching and clarified key implementation files, ensuring comprehensive coverage of system functionalities and integration points.)
alwaysApply: false
---


# resource-monitoring-system

<<<<<<< HEAD
## GPU Telemetry Collection (telemetry.py)
Importance: 95
- Real-time GPU metrics collection pipeline tracking:
  - Memory utilization and allocation
  - PCIe bandwidth (RX/TX rates) 
  - Temperature and thermal thresholds
  - Power consumption and limits
  - Clock speeds (core/memory)
  - Fan speeds and control states
- Event-based telemetry distribution system with middleware processing
- Automatic idle GPU detection with configurable thresholds
- Hardware error detection with mock data fallback

## Metrics Dashboard (dashboard.py) 
Importance: 85
- 60-second rolling history window for GPU performance metrics
- Color-coded visualization system:
  - Primary GPU: Purple theme
  - Secondary GPU: Blue theme
  - Memory metrics: Pink accents
  - Temperature: Orange warning scale
  - Power usage: Cyan indicators
- Critical threshold monitoring:
  - Temperature warning: 80°C
  - Temperature danger: 90°C
  - Memory warning: 256MB free
  - Utilization bands: 30%/60%/90%

## GPU Information Service (gpu_info.py)
Importance: 80
- Comprehensive GPU state tracking:
  - Model and architecture details
  - Memory capacity and usage
  - Current performance states
  - Power and thermal limits
  - Driver and CUDA versions
- Multi-GPU ratio calculations for load balancing
- Hardware capability detection
- Error state monitoring and reporting

## Update Intervals
- Critical metrics: 500ms refresh
- Standard metrics: 1000ms refresh 
- Background metrics: 2000ms refresh

## Tray Integration (tray.py)
Importance: 75
- System tray monitoring widget
- Quick-access GPU metrics
- Status icon state management
- Alert notifications for threshold violations
=======
### Telemetry Collection System
The telemetry system implements comprehensive GPU resource monitoring through:

- Real-time metrics collection for GPU utilization, memory usage, temperature, power consumption, fan speed, and clock speeds
- Middleware pipeline architecture for telemetry processing with:
  - EventBusMiddleware for publishing metrics to event bus
  - LoggingMiddleware for debug logging
- Idle detection mechanism that monitors GPU utilization and triggers notifications after 5 minutes of inactivity

### Metrics Visualization 
Dashboard components provide real-time visualization through:

- Dynamic GPU metrics display showing utilization, memory, PCIe throughput, temperature, power usage
- Historical utilization graph with:
  - Fading effect for timeline visualization
  - Smooth curve interpolation for trend analysis 
  - Per-GPU color coding
- Bandwidth formatting with automatic unit scaling (KB/s to GB/s)

### Event-Driven Updates
The monitoring system implements:

- High-priority subscription to GPUMetricsEvent for dashboard updates
- Dynamic UI component initialization based on GPU detection
- Real-time metrics refresh every 3 seconds
- 60-sample rolling history for trend analysis

### Status Notifications
System tray integration provides:

- GPU idle state monitoring
- User notifications for extended idle periods
- Quick access to GPU utilization status
- Configuration options for notification preferences

Relevant Files:
```
dual_gpu_optimizer/dualgpuopt/telemetry.py
dual_gpu_optimizer/dualgpuopt/metrics.py
dual_gpu_optimizer/dualgpuopt/gui/dashboard.py
dual_gpu_optimizer/dualgpuopt/gui/event_dashboard.py
dual_gpu_optimizer/dualgpuopt/tray.py
```
>>>>>>> 199829b (Update documentation for DualGPUOptimizer to provide a high-level overview of GPU optimization and model inference systems. Organized content into key components: Core GPU Management, Model Optimization Engine, Command System, Monitoring Dashboard, and State Management. Enhanced glob patterns for improved file matching and clarified key implementation files, ensuring comprehensive coverage of system functionalities and integration points.)

$END$