---
description: Specification for GPU resource monitoring, telemetry collection, and alerting system implementation
globs: **/telemetry.py,**/metrics.py,**/monitor.py,**/alerts.py,**/dashboard.py
alwaysApply: false
---


# resource-monitoring-system

The GPU resource monitoring system implements specialized telemetry collection and visualization for dual GPU setups:

Core Telemetry Collection (telemetry.py):
- Real-time GPU metrics tracking:
  * Memory utilization percentages
  * PCIe bandwidth (RX/TX rates)
  * Temperature thresholds
  * Power consumption vs limits
  * Clock speeds (SM/Memory)
- Mock GPU data generation with realistic hardware patterns
- Metric correlation logic (utilization impacts power/temp)

Alert Management System (alerts.py):
- Multi-level severity classification:
  * WARNING: Memory usage >80%
  * CRITICAL: Temperature >80°C
  * EMERGENCY: VRAM <256MB free
- Progressive alert escalation based on duration
- GPU-specific recovery recommendations

Performance Dashboard (dashboard.py):
- 60-sample rolling history buffer
- Dynamic progress bar scaling based on GPU capabilities:
  * Power scaled to GPU TDP
  * Clocks normalized to max speeds
  * Memory relative to total VRAM
- Color-coded visualization:
  * Primary GPU: Purple (#7E57C2)
  * Secondary GPU: Light Purple (#AB47BC) 
  * Temperature: Orange (#FFA726)
  * Power: Cyan (#26C6DA)

Monitoring Configuration:
- Update intervals:
  * Standard: 1000ms
  * Fast mode: 500ms
  * Slow mode: 2000ms
- Metric thresholds:
  * Idle detection: <30% utilization
  * Temperature warning: 80°C
  * Power warning: 90% TDP

Key Paths:
- dual_gpu_optimizer/dualgpuopt/telemetry.py
- dual_gpu_optimizer/dualgpuopt/metrics.py
- dual_gpu_optimizer/dualgpuopt/gui/dashboard.py

$END$