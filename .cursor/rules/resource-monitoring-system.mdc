---
description: Specification for GPU resource monitoring and telemetry collection systems in dual GPU optimization scenarios
globs: **/telemetry.py,**/tray.py,**/metrics.py,**/dashboard.py,**/mpolicy.py,**/gpu_commands.py
alwaysApply: false
---


# resource-monitoring-system

Core Resource Monitoring Components:

1. Real-time GPU Telemetry Collection (telemetry.py)
Importance Score: 95
- GPU state monitoring with specialized metrics:
  - Core and memory utilization percentages
  - Temperature thresholds with graduated warnings (70°C, 80°C, 90°C)
  - Power consumption tracking (0-400W range)
  - PCIe bandwidth monitoring (RX/TX rates)
  - Fan speed and clock frequencies
- Implements middleware pattern for metrics processing pipeline
- Custom mock data generation for testing with realistic GPU behavior profiles

2. Performance Metrics Processing (metrics.py)
Importance Score: 85
- Batch latency tracking for LLM operations
- Queue depth monitoring for inference loads
- PCIe bandwidth conversion and normalization
- Memory reclamation tracking with delta calculations

3. Resource Warning System (tray.py)
Importance Score: 80
- Idle GPU detection based on:
  - Utilization thresholds (configurable percentage)
  - Time-based thresholds (minutes)
  - Custom alert policies per GPU
- Memory usage warnings with thresholds:
  - Critical: >95% VRAM usage
  - Warning: >85% VRAM usage
  - Advisory: >75% VRAM usage

4. Dashboard Integration (dashboard.py)
Importance Score: 75
- Real-time visualization of GPU metrics:
  - 60-point rolling window for historical data
  - Color-coded status indicators based on thresholds
  - Per-GPU performance graphs with automatic scaling
  - Synchronized multi-GPU metric display

5. Mixed Precision Policy (mpolicy.py)
Importance Score: 70
- Resource-aware precision management:
  - FP32 enforcement for critical operations
  - Dynamic precision adjustment based on memory pressure
  - Hardware-specific optimization paths

Key File Paths:
- dual_gpu_optimizer/dualgpuopt/telemetry.py
- dual_gpu_optimizer/dualgpuopt/metrics.py
- dual_gpu_optimizer/dualgpuopt/tray.py
- dual_gpu_optimizer/dualgpuopt/mpolicy.py

$END$