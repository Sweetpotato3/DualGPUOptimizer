---
description: Specification for implementing resource monitoring and telemetry systems in applications with GPU metrics tracking
globs: **/telemetry.py,**/metrics.py,**/monitor.py,**/tray.py,**/memory/*.py
alwaysApply: false
---


# resource-monitoring-system

The telemetry system implements specialized GPU resource monitoring with the following key components:

## GPU Metrics Collection
- Real-time monitoring of core GPU metrics:
  - Utilization percentage (processing and memory)
  - VRAM usage tracking
  - Power consumption levels
  - Temperature monitoring with thresholds
  - PCIe bandwidth metrics
  - Clock speeds (graphics and memory)
  
## Alert Mechanism
- Multi-level threshold-based alerting:
  - CRITICAL: 95% memory usage
  - WARNING: 80% memory usage 
  - EMERGENCY: Memory usage above safe threshold
- Temperature alerts at 80°C (warning) and 90°C (danger)
- Notification delivery through system tray
- Alert persistence and acknowledgment tracking

## Memory Management
- Dynamic memory tracking with utilization projection
- Pre-emptive OOM prevention through:
  - Cache clearing when reaching thresholds
  - Memory reclamation strategies
  - Workload redistribution
- Historical memory usage patterns tracking

## Telemetry Pipeline
File: dualgpuopt/telemetry.py
- Custom middleware system for telemetry processing
- Real-time metrics publishing to event bus
- Configurable polling intervals:
  - Fast: 500ms for critical metrics
  - Standard: 1000ms for general metrics
  - Slow: 2000ms for non-critical data

## Resource Visualization 
File: dualgpuopt/tray.py
- System tray integration for resource monitoring
- Color-coded status indicators
- Compact GPU metrics display
- Quick access to memory management controls

Key file paths implementing this functionality:
- dualgpuopt/telemetry.py
- dualgpuopt/memory/monitor.py
- dualgpuopt/memory/metrics.py
- dualgpuopt/tray.py

$END$