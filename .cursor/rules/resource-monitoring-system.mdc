---
description: Specifications for GPU resource monitoring, metrics collection, and telemetry system implementation
globs: **/telemetry.py,**/metrics.py,**/gpu_info.py,**/tray.py
alwaysApply: false
---


# resource-monitoring-system

The resource monitoring system implements specialized GPU telemetry collection and performance tracking:

## Core Components

### GPU Metrics Collection (telemetry.py)
- Real-time monitoring of critical GPU metrics:
  - Utilization percentage 
  - Memory usage and availability
  - Temperature readings
  - Power consumption
  - Fan speeds
  - Core/Memory clock speeds
- Custom middleware pipeline for metrics processing
- Event-based publication of normalized GPU data

### Resource Utilization Detection (tray.py)
- Idle GPU detection system:
  - Monitors sustained low utilization (<30%)
  - Time-based validation (5 minute threshold)
  - Automated alerts for underutilized resources
- Resource optimization recommendations

### GPU Information Service (gpu_info.py)
- GPU telemetry aggregation system
- Multi-GPU coordination and monitoring
- Real-time performance metric tracking
- Asymmetric GPU configuration handling

### Metrics Processing (metrics.py)
- GPU performance data normalization
- Rolling metrics history maintenance (60 data points)
- Automatic scaling of measurements:
  - Memory (MB/GB)
  - Temperature (°C with 100° cap)
  - Power (relative to 400W max)
  
## Key Business Rules

1. GPU Utilization Thresholds
- Idle detection: <30% utilization
- Sustained monitoring: 5+ minutes
- Temperature cap: 100°C
- Power limit: 400W reference

2. Metrics Collection Intervals
- Critical metrics: 500ms
- Standard metrics: 1000ms
- Background metrics: 2000ms

3. Event Processing
- Priority-based handling (LOW to CRITICAL)
- Automated failover to mock mode
- Hardware failure detection
- Performance degradation alerts

Importance Scores:
- GPU Metrics Collection: 95
- Resource Detection: 85  
- GPU Information Service: 90
- Metrics Processing: 80

$END$