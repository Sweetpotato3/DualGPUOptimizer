---
description: Create a high-level overview documentation for projects focused on GPU optimization and management, particularly when dealing with multi-GPU setups for machine learning workloads and model execution
globs: *.py,*.json
alwaysApply: false
---

# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.

The DualGPUOptimizer is a specialized application for managing and optimizing dual GPU setups, with core business functionality organized around three main areas:

## GPU Management and Monitoring (Importance: 95)
- Probes and validates GPU configurations through NVML integration
- Collects comprehensive GPU metrics including memory, utilization, PCIe throughput, power usage
- Implements continuous telemetry streaming for real-time GPU performance monitoring
- Provides mock GPU functionality for testing and development

Key files:
- `dualgpuopt/gpu_info.py`
- `dualgpuopt/telemetry.py`

## Model Optimization Engine (Importance: 90)
- Generates optimized GPU split configurations based on available GPU memory
- Creates environment configurations for CUDA and NCCL optimizations
- Produces framework-specific command strings for llama.cpp and vLLM
- Manages model presets and configurations for common ML models

Key files:
- `dualgpuopt/optimizer.py`
- `dualgpuopt/gui/optimizer_tab.py`

## Execution Management (Importance: 85)
- Controls model execution across multiple GPUs
- Manages process lifecycle and logging for running models
- Provides real-time monitoring through an interactive dashboard
- Implements idle detection and resource optimization alerts

Key files:
- `dualgpuopt/gui/launcher.py`
- `dualgpuopt/gui/dashboard.py`
- `dualgpuopt/tray.py`

## Configuration and Theme Management (Importance: 75)
- Handles GPU-specific overclocking settings and persistence
- Manages application themes with support for multiple color schemes
- Maintains user preferences and GPU configurations across sessions

Key files:
- `dualgpuopt/gui/settings.py`
- `dualgpuopt/gui/theme.py`

The application integrates these components through a GUI interface that provides real-time monitoring, optimization controls, and model execution management, specifically designed for machine learning workloads on multi-GPU systems.

$END$
END SPECIFICATION

START SPECIFICATION
---
description: Create high-level technical documentation focused on GPU optimization, monitoring, and control logic, particularly for dual GPU systems with complex business workflows
globs: *.py
alwaysApply: false
---

# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.

## Core Business Logic

### GPU Optimization Engine

Key system for optimizing dual GPU performance through:

- Adaptive layer redistribution between GPUs based on performance profiles
- Context size calculation considering GPU memory and model parameters
- Dynamic mixed precision policies for optimized GPU memory usage
- Telemetry collection pipeline for real-time GPU metrics

### GPU Control and Management

Central system components:

- Overclocking control with safety checks and configuration persistence
- Fan speed management with automatic and manual control modes
- Power limit adjustments with validation
- Temperature monitoring and throttling protection

### Event-Driven Monitoring

Real-time monitoring architecture:

- GPU metrics collection including utilization, memory, temperature, power
- Historical data tracking for performance analysis
- Priority-based event dispatch system
- Idle detection and notification system

### Model Execution Optimization

Specialized logic for model deployment:

- Smart batch processing with length-aware scheduling
- GPU memory split calculations for optimal model distribution
- Framework-specific command generation (llama.cpp, vLLM)
- Environment configuration generation

### Dashboard System

Real-time visualization components:

- Multi-GPU metrics display with color-coded indicators
- Performance history graphs with trend analysis
- PCIe bandwidth monitoring and formatting
- Temperature and power threshold management

Critical Paths:

- `dualgpuopt/optimizer.py`
- `dualgpuopt/layer_balance.py`
- `dualgpuopt/batch/smart_batch.py`
- `dualgpuopt/telemetry.py`

$END$
END SPECIFICATION

START SPECIFICATION:
---
description: Create a project overview for code bases containing multiple source files that implement dual GPU optimization, machine learning model deployment, memory profiling and real-time monitoring capabilities. Focus on the high-level architecture and interconnections between core business components.
globs: src/*,lib/*,dualgpuopt/*,dual_gpu_optimizer/*
alwaysApply: false
---


# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


The DualGPUOptimizer system provides specialized optimization and monitoring for dual GPU machine learning deployments through several core subsystems:

## GPU Telemetry & Resource Management
- Real-time GPU metrics collection and monitoring pipeline
- Multi-level alert system for GPU health (EMERGENCY/CRITICAL/WARNING/NORMAL)
- Adaptive error recovery with exponential backoff
- Custom middleware for metrics processing and event distribution

Key paths:
- `dualgpuopt/telemetry.py`
- `dualgpuopt/telemetry_history.py`
- `dualgpuopt/gpu/monitor.py`

## Memory Management & Profiling
- Memory event classification (allocation, deallocation, spikes, leaks)
- Session-based inference memory tracking
- Leak detection using sliding window analysis
- Predictor system for memory growth modeling
- Recovery strategies for OOM conditions

Key paths:
- `dualgpuopt/memory/profiler.py`
- `dualgpuopt/memory/predictor.py`
- `dualgpuopt/memory/recovery.py`

## Model Distribution & Optimization
- Dynamic layer balancing across multiple GPUs
- Architecture-aware memory split calculations
- Framework-specific command generation (llama.cpp, vLLM)
- Context length optimization based on model parameters

Key paths:
- `dualgpuopt/optimizer.py`
- `dualgpuopt/layer_balance.py`
- `dualgpuopt/commands/gpu_commands.py`

## Event & State Management
- Priority-based event bus for GPU operations
- Centralized state management with persistence
- Custom error handling hierarchy for GPU operations
- Event-driven metrics distribution pipeline

Key paths:
- `dualgpuopt/services/event_bus.py`
- `dualgpuopt/services/state_service.py`
- `dualgpuopt/error_handler/handler.py`

## Real-Time Monitoring Interface
- GPU-specific metrics visualization
- Dynamic batch size and memory allocation tracking
- Model deployment status monitoring
- Custom theme system for GPU metrics display

Key paths:
- `dualgpuopt/gui/dashboard.py`
- `dualgpuopt/gui/optimizer_tab.py`
- `dualgpuopt/gui/memory_profile_tab.py`

The system integrates these components to provide comprehensive GPU resource management, optimization and monitoring capabilities specifically designed for large language model deployment across multiple GPUs.

$END$
END SPECIFICATION
