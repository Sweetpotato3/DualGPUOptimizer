
START SPECIFICATION:
---
description: Overview documentation for dual GPU optimizer application focused on optimizing Large Language Model workloads across multiple GPUs through automated detection, configuration, and monitoring
globs: *.py,*.code-workspace
alwaysApply: false
---


# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


The DualGPUOptimizer is built around three core business capabilities:

### GPU Resource Management (Importance: 95)
Handles automated GPU detection and resource allocation through:
- NVML integration for real-time GPU status monitoring
- Dynamic GPU splitting algorithms for workload distribution
- Mock GPU support for testing and demonstration purposes
- Environment variable generation for GPU configuration

### ML Framework Integration (Importance: 90)
Manages machine learning workload execution through:
- Command generation for llama.cpp and vLLM frameworks
- GPU tensor fraction calculations for optimal resource utilization
- Model and context size management for different LLM configurations
Key file: `dual_gpu_optimizer/dualgpuopt/optimizer.py`

### Monitoring and Telemetry (Importance: 85)
Provides real-time monitoring and alerting:
- GPU utilization tracking with stacked visualization
- Idle GPU detection with system tray notifications
- Telemetry streaming for continuous resource monitoring
- Real-time process output logging
Key files:
- `dual_gpu_optimizer/dualgpuopt/telemetry.py`
- `dual_gpu_optimizer/dualgpuopt/tray.py`

### User Interface Components (Importance: 75)
Offers multiple interaction modes:
- GUI with theme management and settings persistence
- CLI for automated/scripted operations
- System tray integration for resource monitoring
- Error handling with guided troubleshooting steps
Key file: `dual_gpu_optimizer/dualgpuopt/gui.py`

$END$
END SPECIFICATION