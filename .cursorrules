
START SPECIFICATION:
---
description: Create high-level documentation focused on business logic organization for GPU optimization and management solutions that handle multi-GPU configurations and model execution
globs: *.py,*.code-workspace
alwaysApply: false
---


# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


The Dual GPU Optimizer system implements specialized logic for managing and optimizing GPU resources across several key areas:

### GPU Resource Management (Importance: 95)
Located in `dual_gpu_optimizer/dualgpuopt/gpu_info.py`, handles critical GPU discovery and resource allocation:
- Parallel GPU detection using NVML integration
- Memory capacity analysis and allocation strategy
- Real-time GPU utilization tracking 

### Optimization Engine (Importance: 98)
Core optimization logic in `dual_gpu_optimizer/dualgpuopt/optimizer.py`:
- Calculates optimal GPU split configurations based on memory profiles
- Generates tensor distribution patterns across multiple GPUs
- Creates environment configurations for balanced GPU workloads
- Produces framework-specific commands for LLM execution

### Model Execution Management (Importance: 85)
Implemented across `runner.py` and `gui.py`:
- Model path and context size configuration
- Dynamic command generation for different LLM frameworks
- Real-time execution monitoring and control
- Preset management for common model configurations

### Resource Monitoring System (Importance: 80)
Handled by `telemetry.py` and `tray.py`:
- NVML-based GPU performance metrics collection
- Idle resource detection and notification
- PCIe throughput monitoring
- Resource utilization visualization

### Configuration Management (Importance: 75)
Split across `configio.py` and related components:
- Theme and appearance customization
- Persistent storage of optimization settings
- Model configuration presets
- Environment file generation

The system architecture emphasizes real-time GPU resource optimization, focusing on efficient distribution of LLM workloads across multiple GPUs while maintaining monitoring and control capabilities.

$END$
END SPECIFICATION